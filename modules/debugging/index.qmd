---
title: Troubleshooting and asking for help
subtitle: 'With coding comes bugs and errors that need troubleshooting. In this chapter, you will learn how to decipher errors, find help for fixing them, and practice asking clear questions with minimally reproducible examples.'
title-block-banner: yes
engine: knitr
filters:
  - webr-teachr
webr:
  packages: ["tidyverse"]
---

```{r setup, include = FALSE}
library(tidyverse)
knitr::knit_hooks$set(class = function(before, options, envir) {
  if(before) {
    sprintf("<div class='%s'>", options$class)
  } else {
    "</div>"
  }
})
knitr::opts_chunk$set(fig.retina = 2,
                      fig.width = 6, 
                      fig.height = 4,
                      fig.align = "center",
                      cache.path = "cache/",
                      message = FALSE,
                      warning = FALSE)
library(icons)

detach_package <- function(pkg, character.only = FALSE)
{
  if(!character.only)
  {
    pkg <- deparse(substitute(pkg))
  }
  search_item <- paste("package", pkg, sep = ":")
  while(search_item %in% search())
  {
    detach(search_item, unload = TRUE, character.only = TRUE)
  }
}

```

# What are error messages?

Eek! There's a bug `r icon_style(fontawesome("bug", style = "solid"),fill = "red")` in my code and it's causing lots of [scary red errors]{style="color: red;"}!

Don't panic - believe it or not, this error is just trying to help you! It also may have just saved you from invalid results that you may not have have noticed.

Errors can be frustrating, essentially you've just asked the computer to do something and it has said no!

There are a few troubleshooting techniques that we can use to find the source of the error, modify your code, and get the results you're looking for.

# Read the error

The first step is to carefully **read** the error message, it often contains clues into where and why the code didn't run. With some time and experience, you'll begin to identify these errors and fix your code quickly based on the message alone!

## Let's have a look at some common error messages

```{webr-teachr}
# One of the r built-in dataset is called "cars"
# Let's try to have a look at the structure of the cars dataset 
str(car)

```

Oh no! An error message: ["Error: object 'car' not found"]{style="color: red;"}!

When you see the error message ["Error: object '\_\_\_\_\_' not found"]{style="color: red;"}, it usually means there is a typo or the object wasn't loaded in correctly. Let's look at how we can fix this.

```{webr-teachr}
# One of the r built-in dataset is called "cars"
# Let's try to have a look at the structure of the cars dataset 
str(<<cars>>)
  
???
  
p <- .code[[1]][[2]][[2]]
  
c("did you put in cars?" = !"cars" %in% all.vars(.code))
```

Typos are a common error, whether it's in the object name or the function name. When you see the error message ["Error: object '\_\_\_\_\_' not found"]{style="color: red;"}, please check and make sure that everything is typed correctly.

## What if we cannot find the function?!

```{r,echo = FALSE, eval=TRUE}
detach_package(tidyverse)
```

```{webr-teachr}
# One of the r built-in dataset is called "cars"
# Let's try to have a look at the structure of the cars dataset 
# Instead of the base R function of checking structure for your dataset, let's use tidyverse function glance to do that. 

glance(cars)
  
???
  
```

Oh no, we could not find the function of `glance()`! We've checked the spelling, so what could be the problem now?

When you see the error message ["Error: could not find function "\_\_\_\_\_"]{style="color: red;"}, it usually means the required package hasn't been loaded into environment.

Let's try add in the required package `tidyverse`

```{webr-teachr}
# One of the r built-in dataset is called "cars"
# Let's try to have a look at the structure of the cars dataset 
# Instead of the base R function of checking structure for your dataset, let's use tidyverse function glance to do that. 

library(<<tidyverse>>)
glance(cars)
  
???
  
```

Sometimes, reading the error message can be a bit tricky. If you're not sure what the error message is trying to tell you, don't worry! We'll cover some other strategies.

## Search the message ðŸ”Ž

**Often,** error messages can be confusing, and even after carefully reading the message it may be difficult to ascertain what the problem is.

Chances are you're not the first person to encounter this problem and there's a well explained solution waiting for you on the internet - you just need to find it.

Take this [notoriously confusing error](https://www.youtube.com/watch?v=vgYS-F8opgE) for example. In this code, I want to see the first few values of my `sample` object. Try running the code below:

```{webr-teachr}

sample[1:3]
  
???
  
```

["Error: object of type 'closure' is not subsettable"]{style="color: red;"}

What is a *'closure'*? Why can't I subset my data with `x[1:3]`?

When confronted with an error you've never seen, and don't understand - search the web! Just copy the error exactly, "object of type 'closure' is not subsettable", add some relevant keywords like "R" and search!

With some luck, you'll be met with a series of StackOverflow threads, blog posts and other websites explaining the solution to the exact problem you're facing. Here's my top 3 search results:

-   <https://coolbutuseless.github.io/2019/02/12/object-of-type-closure-is-not-subsettable/>
-   <https://stackoverflow.com/questions/11308367/error-in-my-code-object-of-type-closure-is-not-subsettable>
-   <https://www.r-bloggers.com/2019/02/object-of-type-closure-is-not-subsettable/>

::: callout-tip
## Tips for searching errors online

**1.** Add double quotes around the error message. This searches for those exact words in that exact order.

**2.** For long error messages, just search for the unique sounding parts (don't include parts specific to your code, like a variable name)

**3.** Add keywords to describe your code's language, like 'R'.

**4.** If you're looking for solutions on a specific website, add `site:<domain>` to the search. For example, `site:stackoverflow.com`.
:::

## Divide and conquer ðŸ’ª

If you understand the message, but have no idea where the problem stems from - try running smaller sections of your code to see if that small section causes the error. Once you identify the small section of code causing the error, it should be slightly easier to find the issue in your code.

::: {.callout-note icon="false"}
## Running into this issue often?

If you frequently use this strategy, it may indicate a code styling issue. Consider breaking your code into smaller pieces instead of trying to do everything in one line. For tips on good coding practices, see [Jenny Bryan's presentation 'Code Smells and Feels](https://www.youtube.com/watch?v=7oyiPBjLAWY).
:::

## Turn it off and on again ðŸ”„

The age old classic (but sometimes it really does work!).

In R, you don't necessarily need to restart your *whole* computer, but instead you can try restarting RStudio, or your R session. Usually I would restart R, which can be done in RStudio

This can be done in two ways:

1. 'Session' on the top menu bar, then 'Restart R'
2. `Ctrl + Shift + F10` (Windows) or `Cmd + Shift + F10` (Mac)

There are a few reasons why this can work. It allows you to re-run your code from a clean slate, with no extra packages loaded that you haven't asked for and no extra objects in your environment.

# Asking for help

Once you've carefully read the error, searched the web, and tried everything else you can think of, it's time to ask for help. However for a stranger to take time out of their day to find the solution and write a good answer for you, you better have written a good question for them!

::: {.callout-note}
## Good Questions
A **good question** consists of a **clear and concise** description of your problem, and a **small example** that can be used to reproduce the issue.
:::

## Describe the problem

A good description provides some context to your question. When writing your question, think about what you are trying to achieve.

Instead of writing generic phrases like "it doesn't work" or "it shows errors," provide more detailed information about your issue.

* Clearly state your goal and the expected output.

* Include the exact wording of any error messages you receive.

* Use a descriptive title that summarises your problem succinctly.


## Provide a minimal reproducible example

A minimal reproducible example is the smallest amount of code that still produces the error. This step is so important that we've dedicated an entire section to writing good examples. An example allows the person helping you to quickly understand the issue you are facing, and make changes directly to your example to demonstrate the solution.

The process of creating an example, and reducing it down into the minimal amount of code you can to produce the error, often results in you finding the solution yourself.

## Where to ask for help

There are many websites commonly used by developers facing troubleshooting errors, where experts visit and try to help. Here are some of the most popular:

[**Stack Overflow.**](https://stackoverflow.com/questions/tagged/rstudio). This is a platform where you can search for solutions and ask for help. Before asking a question on Stack Overflow, you can search some key words from your understanding of error messages. It is likely that people have already asked similar questions related to your error and you can try the solutions provided by others under the question.

[**RStudio Community.**](https://forum.posit.co/) This is a community channel for RStudio users. Similar to Stack Overflow, you can ask questions and also find solutions.

[**GitHub.**](https://github.com/).
If you've thoroughly investigated your error and believe the issue lies in the package rather than your code, you can contact the package's developer. Most R packages are open-source and maintained on Github.

1. Search for the package's repository using its name along with "R" and "GitHub".

2. Use the "Issues" tab to report your problem.

3. Make sure to check if the issue has already been reported before creating a new one.

**Discussion Forum on Moodle or** [**Ed.**](http://edstem.org) If you're preparing for your Monash University course, a good place to ask for help is the discussion forum on Moodle. You can also seek assistance from your lecturers and tutors.

* If your unit uses Ed as a discussion space, use it to ask or answer questions.
    + Some units may even allow you to post privately or anonymously if you feel shy posting publicly.

::: {.callout-tip}
## Help and Learn
Answering questions on the forum can help consolidate your understanding and prepare you for asking and answering questions in other forums such as Stack Overflow.
:::

**Teachers and Tutors in Consultations.**  Ask your lecturers and tutors for help during consultation sessions, which are available for any content-related difficulties, including debugging code.

- Prepare a small demonstration of your error beforehand to make the session more effective.
- The benefit of these sessions is that we can guide you closer to the solution until you figure it out yourself.
- Don't be disheartened if your error, which you've struggled with for hours, is solved in minutes â€” we've had plenty of practice (also being stuck for hours) troubleshooting these errors.

# Minimal Reproducible Examples

::: {.callout-note}
## Remember
A minimally reproducible example (often called an MRE) contains all of the code necessary for someone else to encounter the same error you're facing.
:::

To create one, you need to provide the **exact packages you're using**, some **data** if needed, and **your code.** A good example is also **minimal**, which means that you've taken the time to remove as much unrelated packages, code and data as possible to produce the error.

## Providing

