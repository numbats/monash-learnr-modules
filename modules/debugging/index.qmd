---
title: Troubleshooting and asking for help
subtitle: 'With coding comes bugs and errors that need troubleshooting. In this chapter, you will learn how to decipher errors, find help for fixing them, and practice asking clear questions with minimally reproducible examples.'
title-block-banner: yes
engine: knitr
filters:
  - webr-teachr
webr:
  packages: ["tidyverse"]
---

```{r setup, include = FALSE}
library(tidyverse)
knitr::knit_hooks$set(class = function(before, options, envir) {
  if(before) {
    sprintf("<div class='%s'>", options$class)
  } else {
    "</div>"
  }
})
knitr::opts_chunk$set(fig.retina = 2,
                      fig.width = 6, 
                      fig.height = 4,
                      fig.align = "center",
                      cache.path = "cache/",
                      message = FALSE,
                      warning = FALSE)
library(icons)

detach_package <- function(pkg, character.only = FALSE)
{
  if(!character.only)
  {
    pkg <- deparse(substitute(pkg))
  }
  search_item <- paste("package", pkg, sep = ":")
  while(search_item %in% search())
  {
    detach(search_item, unload = TRUE, character.only = TRUE)
  }
}

```

# What are error messages?

Eek! There's a bug `r icon_style(fontawesome("bug", style = "solid"),fill = "red")` in my code and it's causing lots of <span style="color: red;">scary red errors</span>!

Don't panic - believe it or not, this error is just trying to help you! It also may have just saved you from invalid results that you may not have have noticed.

Errors can be frustrating, essentially you've just asked the computer to do something and it has said no!

There are a few troubleshooting techniques that we can use to find the source of the error, modify your code, and get the results you're looking for.

# Read the error

The first step is to carefully **read** the error message, it often contains clues into where and why the code didn't run. With some time and experience, you'll begin to identify these errors and fix your code quickly based on the message alone!


## Let's have a look at some common error messages

```{webr-teachr}
# One of the r built-in dataset is called "cars"
# Let's try to have a look at the structure of the cars dataset 
str(car)

```

Oh no! An error message: <span style="color: red;">"Error: object 'car' not found"</span>!

When you see the error message <span style="color: red;">"Error: object '_____' not found"</span>, it usually means there is a typo or the object wasn't loaded in correctly. Let's look at how we can fix this. 

```{webr-teachr}
# One of the r built-in dataset is called "cars"
# Let's try to have a look at the structure of the cars dataset 
str(<<cars>>)
  
???
  
p <- .code[[1]][[2]][[2]]
  
c("did you put in cars?" = !"cars" %in% all.vars(.code))
```

Typos are a common error, whether it's in the object name or the function name. When you see the error message <span style="color: red;">"Error: object '_____' not found"</span>, please check and make sure that everything is typed correctly.


## What if we cannot find the function?!

```{r,echo = FALSE, eval=TRUE}
detach_package(tidyverse)
```

```{webr-teachr}
# One of the r built-in dataset is called "cars"
# Let's try to have a look at the structure of the cars dataset 
# Instead of the base R function of checking structure for your dataset, let's use tidyverse function glance to do that. 

glance(cars)
  
???
  
```

Oh no, we could not find the function of `glance()`! We've checked the spelling, so what could be the problem now?

When you see the error message <span style="color: red;">"Error: could not find function "_____"</span>, it usually means the required package hasn't been loaded into environment.

Let's try add in the required package `tidyverse`


```{webr-teachr}
# One of the r built-in dataset is called "cars"
# Let's try to have a look at the structure of the cars dataset 
# Instead of the base R function of checking structure for your dataset, let's use tidyverse function glance to do that. 

library(<<tidyverse>>)
glance(cars)
  
???
  
```

Sometimes, reading the error message can be a bit tricky. If you're not sure what the error message is trying to tell you, don't worry! We'll cover some other strategies.

# Search the message

**Often,** error messages can be confusing, and even after carefully reading the message it may be difficult to ascertain what the problem is.

Chances are you're not the first person to encounter this problem and there's a well explained solution waiting for you on the internet - you just need to find it.

Take this [notoriously confusing error](https://www.youtube.com/watch?v=vgYS-F8opgE) for example. In this code, I want to see the first few values of my `sample` object.

```{webr-teachr}

sample[1:3]
  
???
  
```

<span style="color: red;">"Error: object of type 'closure' is not subsettable"</span>

What is a *'closure'*? Why can't I subset my data with `x[1:3]`?

When confronted with an error you've never seen, and don't understand - search the web! Just copy the error exactly, "object of type 'closure' is not subsettable", add some relevant keywords like "R" and search!

With some luck, you'll be met with a series of StackOverflow threads, blog posts and other websites explaining the solution to the exact problem you're facing. Here's my top 3 search results:

* [https://coolbutuseless.github.io/2019/02/12/object-of-type-closure-is-not-subsettable/](https://coolbutuseless.github.io/2019/02/12/object-of-type-closure-is-not-subsettable/)
* [https://stackoverflow.com/questions/11308367/error-in-my-code-object-of-type-closure-is-not-subsettable](https://stackoverflow.com/questions/11308367/error-in-my-code-object-of-type-closure-is-not-subsettable) 
* [https://www.r-bloggers.com/2019/02/object-of-type-closure-is-not-subsettable/](https://www.r-bloggers.com/2019/02/object-of-type-closure-is-not-subsettable/)

Some tips for searching errors with Google (and most other search engines):

1. Add 
2.



