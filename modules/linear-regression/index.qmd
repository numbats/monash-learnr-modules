---
title: Linear regression with R
subtitle: 'Welcome to the LearR Academy module on Linear Regression! This module is designed to introduce you to the concepts and techniques of linear regression, an widely used tool in the field of statistics, data science, and machine learning. Through this module, you will explore the mathematical principles underlying linear regression, learn how to build and evaluate models using R, and understand the practical applications of these models in real-world scenarios. Whether you are predicting housing prices or forecasting sales, this module will equip you with the skills and knowledge to leverage the power of linear regression for insightful data analysis and informed decision-making.'
title-block-banner: yes
engine: knitr
filters:
  - webr-teachr
webr:
  packages: ['ggplot2']
---

# Simple linear regression

## Introduction
Linear regression is a statistical method used to model the relationship between a dependent variable and one or more independent variables. It aims to find the best-fitting linear relationship that describes how the dependent variable changes in response to the independent variable(s). This technique is of key importance in statistics and data science and is used extensively for predictive analysis.

Simple linear regression refers to fitting a straight line to a set of data points to model the relationship between a single independent variable and a dependent variable. The equation of a simple linear regression model is given by: 
$y = \beta_0 + \beta_1x + \epsilon$,
where $y$ is the dependent variable, $x$ is the independent variable, $\beta_0$ is the intercept, $\beta_1$ is the slope, and $\epsilon$ is the error term that follows a normal distribution with zero mean and constant variance $\sigma^2$.

:::{.callout-caution}
## Your turn!
Consider the following plot with `dist` as the dependent variable and `speed` as the independent variable:

```{r slr-plot, eval = TRUE}
library(ggplot2)
ggplot(cars, aes(speed, dist)) +
  geom_point()
```

What is the approximate best intercept and slope for the data?
:::


```{webr-teachr}
library(ggplot2)
ggplot(cars, aes(speed, dist)) +
  geom_point() + 
# Insert the intercept
  geom_abline(intercept = <<-17>>, 
# Insert the slope
              slope = <<4>>)

???

p<- .printed[[1]]
abline_data<- p$layers[[2]]$data


c(
  "Humm. The intercept seems to be too high..." = abline_data$intercept > (-12),
  "Humm. The intercept seems to be too low..." = abline_data$intercept < (-22),
  "Are you sure. The slop seems to be too low" = abline_data$slope < (2),  
  "Are you sure. The slop seems to be too high" = abline_data$slope > (6) 
)
```





# Pearson correlation coefficient #

The Pearson correlation coefficient ($r$) is a measure of the strength and direction of association between two continuous variables. It ranges from -1 to 1, where:

- 1 indicates a perfect positive linear relationship,
- -1 indicates a perfect negative linear relationship,
- 0 indicates no linear relationship.

The Pearson correlation coefficient is calculated using the following formula:

$$
r_{x,y} = \frac{\sum_{i_1}^{n}{(x_i-\bar{x})(y_i-\bar{y})}} {\sqrt{\sum_{i=1}^{n}{(x_i-\bar{x})^2}}\sqrt{\sum_{i=1}^{n}{(y_i-\bar{y})^2}}}
$$

where:

- $n$ is the number of pairs of of data points,
- $x$ and $y$ are the individual sample points indexed with $i$,
- $\bar{x}$ and $\bar{y}$ are the sample means of $x$ and $y$, respectively.


:::{.callout-caution}
## Your turn!
Consider the `mtcars` dataset. Compute the the Pearson correlation coefficient between `mpg` (miles per gallon) and `hp` (horsepower). 
:::

```{webr-teachr}
# Load the dataset
data(mtcars)

# Calculate Pearson correlation
correlation <- cor(<<mtcars$mpg>>, <<mtcars$hp>>)

???

c(
  "Are you using the correct variables?" = abs(correlation - (-0.7761684)) > 10e-6
)
```


:::{.callout-caution}
## Your turn!
Consider the `mtcars` dataset. Create a scatter plot with a regression line considering the variables `mpg` (miles per gallon) and `hp` (horsepower). 
:::

```{webr-teachr}
# Load the dataset
data(mtcars)

# Create a scatter plot with a regression line
ggplot(mtcars, aes(x = <<hp>>, y = <<mpg>>)) +
  geom_point() +
  geom_smooth(method = "lm", col = "blue") +
  labs(title = "Scatter Plot of MPG vs Horsepower",
       x = "Horsepower",
       y = "Miles per Gallon") +
  theme_minimal()

???

p<- .code[[1]]
x_variable<- p$mapping[[1]][2][[1]]
y_variable<- p$mapping[[2]][2][[1]]

c(
  "Are you using the correct variables?" = x_variable != "hp", 
  "Are you using the correct variables?" = y_variable != "mpg" 
)
```



# Residuals and R-squared













```{r}
# Load the dataset
data(mtcars)

# Perform linear regression
model <- lm(mpg ~ hp, data = mtcars)

# Summary of the model
summary(model)
```






**Congratulations! This is the end of the Linear Regression with R module!**
