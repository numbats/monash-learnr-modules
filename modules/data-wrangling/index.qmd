---
title: Data wrangling with R
subtitle: 'In this chapter, you will learn to use tidyr and dplyr from the tidyverse in R for tidying your data set and data maniplulation.'
title-block-banner: yes
engine: knitr
format:
  html:
    from: markdown+emoji
filters:
    - webr-teachr
webr:
    packages: [palmerpenguins, rlang, dplyr, tidyr]
difficulty: "Beginner"
time: "30 minutes"
---

```{r}
#| echo: false
#| output: false

# library
library(palmerpenguins)
library(tidyverse)
```

# Introduction to tidyverse

## Introduction to tidyverse

The tidyverse is a collection of R packages that transform and visualize data. They aim to be cohesive with each other and provide simple building block functions for you to use in complex applications. All packages of the tidyverse share very similar syntax and ideologies.

The tidyverse includes the following packages:

* `dplyr`: grammar of data manipulation
* `tidyr`: reshape your data
* `readr`: read rectangular data
* `tibble`: re-imagining of the data frame
* `stringr`: working with string data
* `ggplot2`: grammar of graphics

and many more...

In this chapter, we focus on two packages: **dplyr** and **tidyr**.

**dplyr** makes manipulating data easy. **tidyr** helps you to create "tidy data" (data where each variable is in a column, each observation is a row and each value is a cell). These packages contain the functions that help with adding, renaming, removing columns, computing new variables, joining data sets together, and summarising your data. These can solve the most common data manipulation challenges.


::: {.callout-caution}
## To get start on the journey

First, install the core tidyverse packages with: `install.packages("tidyverse")`

Then, load the tidyverse package with: `library(tidyverse)`
:::

::: {.callout-tip}
Did you know you can also load specific library separately, for example, `library(dplyr)`
:::

# Introduction to dplyr

## Introduction to dplyr

**dplyr** provides a selection of tools for the most common data wrangling tasks. There are a few simple yet handy functions.

* `select()`
* `filter()`
* `arrange()`
* `mutate()`
* `group_by()` along with `ungroup()`
* `count()`
* `case_when()`


## select()

This function allows you to pick particular variables from your data.

```{r}
#| eval: false

data |>
    select(variable)
```

This is not only limited to one variable selection. You can select multiple variables by separating the column name with the comma.

```{r}
#| eval: false

data |>
    select(variable1, variable2)
```

::: {.callout-caution}
## Your turn!
We will be using penguin data from the palmerpenguins package.

Let's say that you want to look at whether the **body mass** changes over the **year**.

Hint: To look at the column names of the data, you can use the functions `colnames()`
:::

```{webr-teachr}
# library the packages needed
library(palmerpenguins)
library(dplyr)

# Select the column of interests
penguins |>
    <<select(body_mass_g, year)>>

???

!all(c("body_mass_g", "year") %in% all.vars(.code))
```

### Selection helpers

There are many helper functions that allow you to select variables by matching the patterns in the column's name. Let's look at a few examples.

* `starts_with()`: select all variables that start with a prefix.

```{r}
penguins |>
    select(starts_with("bill"))
```

* `ends_with()`: select all variables that ends with a suffix.

```{r}
penguins |>
    select(ends_with("mm"))
```

* `contains()`: select all variables that contains a literal string.

```{r}
penguins |>
    select(contains("length"))
```

* `num_range()`: select all variables that matches a numerical range like x01, x02, x03.

```{r}
billboard |> 
    select(num_range("wk", 10:15))
```


## filter()

This allow you to extract observation from the data based on a given condition.

```{r}
#| eval: false

data |>
    filter(expression)
```

For the expression field, there are many functions and operators that are useful for constructing the expressions.

* `==`, `>`, `>=` etc
* `&`, `|`, `!`, `xor()`
* `is.na()`
* `between()`, `near()`

```{r}
penguins |>
    filter(species == "Gentoo")
```





