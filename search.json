[
  {
    "objectID": "modules/debugging/index.html",
    "href": "modules/debugging/index.html",
    "title": "Troubleshooting and asking for help",
    "section": "",
    "text": "Eek! There’s a bug   in my code and it’s causing lots of scary red errors!\nDon’t panic - believe it or not, this error is just trying to help you! It also may have just saved you from invalid results that you may not have have noticed.\nErrors can be frustrating, essentially you’ve just asked the computer to do something and it has said no!\nThere are a few troubleshooting techniques that we can use to find the source of the error, modify your code, and get the results you’re looking for."
  },
  {
    "objectID": "modules/debugging/index.html#lets-have-a-look-at-some-common-error-messages",
    "href": "modules/debugging/index.html#lets-have-a-look-at-some-common-error-messages",
    "title": "Troubleshooting and asking for help",
    "section": "Let’s have a look at some common error messages",
    "text": "Let’s have a look at some common error messages\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\nOh no! An error message: “Error: object ‘palmerpenguins’ not found”!\nWhen you see the error message “Error: object ‘_____’ not found”, it usually means there is a typo or the object wasn’t loaded in correctly. In this instance, we haven’t used the correct object. Let’s look at how we can fix this.\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\nTypos are a common error, whether it’s in the object name or the function name. In this example, we accidentally used the package name, instead of the name of the data from within the package. When you see the error message “Error: object ‘_____’ not found”, please check and make sure that everything is inputted correctly and the relevant packages are loaded in."
  },
  {
    "objectID": "modules/debugging/index.html#what-if-we-cannot-find-the-function",
    "href": "modules/debugging/index.html#what-if-we-cannot-find-the-function",
    "title": "Troubleshooting and asking for help",
    "section": "What if we cannot find the function?!",
    "text": "What if we cannot find the function?!\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\nOh no, we could not find the function of glimpse()! We’ve checked the spelling, so what could be the problem now?\nWhen you see the error message “Error: could not find function”_____”, it usually means the required package hasn’t been loaded into environment.\nLet’s try add in the required package dplyr\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\nSometimes, reading the error message can be a bit tricky. If you’re not sure what the error message is trying to tell you, don’t worry! We’ll cover some other strategies."
  },
  {
    "objectID": "modules/debugging/index.html#search-the-message",
    "href": "modules/debugging/index.html#search-the-message",
    "title": "Troubleshooting and asking for help",
    "section": "Search the message 🔎",
    "text": "Search the message 🔎\nOften, error messages can be confusing, and even after carefully reading the message it may be difficult to ascertain what the problem is.\nChances are you’re not the first person to encounter this problem and there’s a well explained solution waiting for you on the internet - you just need to find it.\nTake this notoriously confusing error for example. In this code, I want to see the first few values of my sample object. Try running the code below:\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\n“Error: object of type ‘closure’ is not subsettable”\nWhat is a ‘closure’? Why can’t I subset my data with x[1:3]?\nWhen confronted with an error you’ve never seen, and don’t understand - search the web! Just copy the error exactly, “object of type ‘closure’ is not subsettable”, add some relevant keywords like “R” and search!\nWith some luck, you’ll be met with a series of StackOverflow threads, blog posts and other websites explaining the solution to the exact problem you’re facing. Here’s my top 3 search results:\n\nhttps://coolbutuseless.github.io/2019/02/12/object-of-type-closure-is-not-subsettable/\nhttps://stackoverflow.com/questions/11308367/error-in-my-code-object-of-type-closure-is-not-subsettable\nhttps://www.r-bloggers.com/2019/02/object-of-type-closure-is-not-subsettable/\n\n\n\n\n\n\n\nTips for searching errors online\n\n\n\n1. Add double quotes around the error message. This searches for those exact words in that exact order.\n2. For long error messages, just search for the unique sounding parts (don’t include parts specific to your code, like a variable name)\n3. Add keywords to describe your code’s language, like ‘R’.\n4. If you’re looking for solutions on a specific website, add site:&lt;domain&gt; to the search. For example, site:stackoverflow.com."
  },
  {
    "objectID": "modules/debugging/index.html#divide-and-conquer",
    "href": "modules/debugging/index.html#divide-and-conquer",
    "title": "Troubleshooting and asking for help",
    "section": "Divide and conquer 💪",
    "text": "Divide and conquer 💪\nIf you understand the message, but have no idea where the problem stems from - try running smaller sections of your code to see if that small section causes the error. Once you identify the small section of code causing the error, it should be slightly easier to find the issue in your code.\n\n\n\n\n\n\nRunning into this issue often?\n\n\n\nIf you frequently use this strategy, it may indicate a code styling issue. Consider breaking your code into smaller pieces instead of trying to do everything in one line. For tips on good coding practices, see Jenny Bryan’s presentation ’Code Smells and Feels."
  },
  {
    "objectID": "modules/debugging/index.html#turn-it-off-and-on-again",
    "href": "modules/debugging/index.html#turn-it-off-and-on-again",
    "title": "Troubleshooting and asking for help",
    "section": "Turn it off and on again 🔄",
    "text": "Turn it off and on again 🔄\nThe age old classic (but sometimes it really does work!).\nIn R, you don’t necessarily need to restart your whole computer, but instead you can try restarting RStudio, or your R session. Usually I would restart R, which can be done in RStudio\nThis can be done in two ways:\n\n‘Session’ on the top menu bar, then ‘Restart R’\nCtrl + Shift + F10 (Windows) or Cmd + Shift + F10 (Mac)\n\nThere are a few reasons why this can work. It allows you to re-run your code from a clean slate, with no extra packages loaded that you haven’t asked for and no extra objects in your environment."
  },
  {
    "objectID": "modules/debugging/index.html#describe-the-problem",
    "href": "modules/debugging/index.html#describe-the-problem",
    "title": "Troubleshooting and asking for help",
    "section": "Describe the problem",
    "text": "Describe the problem\nA good description provides some context to your question. When writing your question, think about what you are trying to achieve.\nInstead of writing generic phrases like “it doesn’t work” or “it shows errors,” provide more detailed information about your issue.\n\nClearly state your goal and the expected output.\nInclude the exact wording of any error messages you receive.\nUse a descriptive title that summarises your problem succinctly."
  },
  {
    "objectID": "modules/debugging/index.html#provide-a-minimal-reproducible-example",
    "href": "modules/debugging/index.html#provide-a-minimal-reproducible-example",
    "title": "Troubleshooting and asking for help",
    "section": "Provide a minimal reproducible example",
    "text": "Provide a minimal reproducible example\nA minimal reproducible example is the smallest amount of code that still produces the error. This step is so important that we’ve dedicated an entire section to writing good examples. An example allows the person helping you to quickly understand the issue you are facing, and make changes directly to your example to demonstrate the solution.\nThe process of creating an example, and reducing it down into the minimal amount of code you can to produce the error, often results in you finding the solution yourself."
  },
  {
    "objectID": "modules/debugging/index.html#where-to-ask-for-help",
    "href": "modules/debugging/index.html#where-to-ask-for-help",
    "title": "Troubleshooting and asking for help",
    "section": "Where to ask for help",
    "text": "Where to ask for help\n\n\n\nStack Overflow.\nThis is a platform where you can search for solutions and ask for help. Before asking a question on Stack Overflow, you can search some key words from your understanding of error messages. It is likely that people have already asked similar questions related to your error and you can try the solutions provided by others under the question.\n\n\nRStudio Community.\nThis is a community channel for RStudio users. Similar to Stack Overflow, you can ask questions and also find solutions.\n\n\nGitHub.\nIf you’ve thoroughly investigated your error and believe the issue lies in the package rather than your code, you can contact the package’s developer. Most R packages are open-source and maintained on Github.\n1. Search for the package’s repository using its name along with “R” and “GitHub”.\n2. Use the “Issues” tab to report your problem.\n3. Make sure to check if the issue has already been reported before creating a new one.\n\n\nDiscussion Forum on Moodle or Ed.\nIf you’re preparing for your Monash University course, a good place to ask for help is the discussion forum on Moodle. You can also seek assistance from your lecturers and tutors.\n\nIf your unit uses Ed as a discussion space, use it to ask or answer questions. Some units may even allow you to post privately or anonymously if you feel shy posting publicly.\n\n\n\nTrusty (sometimes) AI.\nThere are many AI tools that can help you write code, and some can even help you debug it. However, AI should be used with caution. While it can assist in troubleshooting errors, it may not always provide the best solution. You should still try to understand what the code is doing and why it’s causing an error to avoid using code from AI which may be producing inaccurate results (despite running without error).\n\n\nTeachers and Tutors in Consultations.\nAsk your lecturers and tutors for help during consultation sessions, which are available for any content-related difficulties, including debugging code.\n\nPrepare a small demonstration of your error beforehand to make the session more effective.\nThe benefit of these sessions is that we can guide you closer to the solution until you figure it out yourself.\nDon’t be disheartened if your error, which you’ve struggled with for hours, is solved in minutes — we’ve had plenty of practice (also being stuck for hours) troubleshooting these errors.\n\n\n\n\n\n\n\n\n\n\nHelp and Learn\n\n\n\nAnswering questions on the forum can help consolidate your understanding and prepare you for asking and answering questions in other forums such as Stack Overflow."
  },
  {
    "objectID": "modules/debugging/index.html#providing-minimal-datasets",
    "href": "modules/debugging/index.html#providing-minimal-datasets",
    "title": "Troubleshooting and asking for help",
    "section": "Providing minimal datasets",
    "text": "Providing minimal datasets\nIf your question involves using a dataset, you will need to provide a small dataset to demonstrate the problem. Often people say that the data is confidential and can’t be provided, but usually the problem isn’t specific to the data you are using. Taking the time to try your code on a different dataset is a good debugging step, and R provides many good datasets to use in these examples built in. You can find a complete list of datasets available to all R users with the data(package = \"datasets\") function.\nIf you do need to use a custom dataset specific to your project, try reducing the size of the dataset before making your example. The error may only occur for some specific rows of your data. Once you’ve narrowed in on the issue, you can convert your minimal data object to code for producing it using the dput() function.\nFor example you can use use the below code to provide the first 6 rows of the iris dataset.\n\ndput(head(iris))\n\nstructure(list(Sepal.Length = c(5.1, 4.9, 4.7, 4.6, 5, 5.4), \n    Sepal.Width = c(3.5, 3, 3.2, 3.1, 3.6, 3.9), Petal.Length = c(1.4, \n    1.4, 1.3, 1.5, 1.4, 1.7), Petal.Width = c(0.2, 0.2, 0.2, \n    0.2, 0.2, 0.4), Species = structure(c(1L, 1L, 1L, 1L, 1L, \n    1L), levels = c(\"setosa\", \"versicolor\", \"virginica\"), class = \"factor\")), row.names = c(NA, \n6L), class = \"data.frame\")\n\n\nTry it yourself! Create a minimal dataset using the dput() function for the penguins dataset.\n\n\n\n\n\n\nHint\n\n\n\nWe want to be putting the penguins data to create a minimal dataset.\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\nYou can then copy this generated code, and make it part of your example to create your example data.\nAlternatively you can save this minimal dataset to a file, and attach the file in your question.\nWhen you read that file in, make sure you avoid absolute paths to it. Not everyone has the same file structure as you, so they won’t be able to access your dataset if it is stored at /home/learnr/Documents/My Job/project_2040/data/housing_prices.csv. Instead provide a short relative oath, such as housing_prices.csv or data/housing_prices.csv. If you’re uploading files, it’s also nice to provide a zip that contains a R script of your minimal reproducible code, along with the data in the folders referenced by the script.\n– potentially a multiple choice question here on relative paths? —"
  },
  {
    "objectID": "modules/debugging/index.html#create-minimal-reproducible-examples",
    "href": "modules/debugging/index.html#create-minimal-reproducible-examples",
    "title": "Troubleshooting and asking for help",
    "section": "Create minimal reproducible examples",
    "text": "Create minimal reproducible examples\nAs part of a data analysis you probably write a lot of code. You need to read in the data, tidy it up, run some calculations and make some plots. When you run into an error, providing your entire analysis just makes it more time consuming for helpers to run your code and identify the source of the error.\nA minimal reproducible example cuts out as much of the code as possible, keeping just a few essential lines for producing the error. If your error comes after the data cleaning, remove that code and start with a clean, minimal dataset.\nIf your code includes any randomisation, it’s a good idea to set the random seed using the set.seed() function. This ensures that each time the code is ran, the same random results are obtained.\n\n\n\n\n\n\nReproducing random results\n\n\n\nThe set.seed() function in R ensures reproducible results in code involving random values. It guarantees the same random values are produced each time you run the code, aiding in debugging and consistency. The number in the brackets can be any integer.\n\n\nThe process of cleaning up your code and reducing it down into a small example is another great exercise that often helps you identify the problem and fix it yourself.\nRemember, you need to provide all code necessary to load in packages you use, read in data and run functions that cause the error."
  },
  {
    "objectID": "modules/debugging/index.html#provide-session-information",
    "href": "modules/debugging/index.html#provide-session-information",
    "title": "Troubleshooting and asking for help",
    "section": "Provide session information",
    "text": "Provide session information\nSometimes the error is specific to the version of R, or the packages you are using. To help others help you, you can provide the session information using the sessioninfo::sessionInfo() function. This will print out the version of R you are using, and the versions of the packages you have loaded, which makes it easier to fix some version, language or OS specific problems. A good reproducible example should come with this session information output."
  },
  {
    "objectID": "modules/debugging/index.html#using-the-reprex-package-for-producing-examples",
    "href": "modules/debugging/index.html#using-the-reprex-package-for-producing-examples",
    "title": "Troubleshooting and asking for help",
    "section": "Using the reprex package for producing examples",
    "text": "Using the reprex package for producing examples\nthe reprex package is a useful tool that can help you make a reproducible example. It can be used to run the code in your example in a clean environment, which is a good way to test if you’ve included everything necessary for others to reproduce the error. It’ll also copy a neatly formatted version of your example which will also display in your Viewer window and includes images and console output from the example as it runs on your computer. It can even include a collapsible summary of your session information.\nTo use reprex:\n\nInstall it from CRAN using install.packages(\"reprex\").\nOnce installed, load in the reprex package using library(reprex)\nYou can use the reprex() function to create a reproducible example.\n\nYou can also use the reprex() function in RStudio by selecting the code you want to include in the example, and clicking the “Reprex” button in the Addins menu.\n\n    \n    \n\nAfter clicking Render reprex... in the Addins menu, a new window will pop up with the reprex output (left image). As you’ve copied the example, you can use the ‘on the clipboard’ source. Choose a venue for where you’re planning to post the question, and tick ‘Append session info’. Finally, press Render to run the code and see if it’s reproducible.\nView this short clip to see how to use the reprex package."
  },
  {
    "objectID": "modules/project-structure/02-importing-exporting.html",
    "href": "modules/project-structure/02-importing-exporting.html",
    "title": "Importing and Exporting data file",
    "section": "",
    "text": "Data can come in many formats, and their file extension typically provides clues into how to import the data into the R environment.\n\n\n\n\n\n\nPaths\n\n\n\nRemember, we should always use a relative path instead of an absolute path. Refer to the Project Structure module to understand why it is important.\n\n\n\n\nCSV or Comma Separated Values is one of the most common data files you will be working with. The value inside the file is separated by , and rows are separated by new lines.\n\n\n\n\n\n\nImport CSV:\n\n\n\n.csv can be read with read_csv() from the readr package.\n\ncsv_data &lt;- readr::read_csv(here::here(\"modules/project-structure/data/penguins.csv\"))\n\nRows: 344 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): species, island, sex\ndbl (5): bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncsv_data\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\n\n\n\n\nThe .xls and .xlsx are Excel spreadsheets. These could contain anything and require a careful inspection to import it correctly. The file will often contain a different sheet, so you need to specify the sheet you want to import.\n\n\n\n\n\n\nImport Excel\n\n\n\nThe readr package does not allow us to import Excel spreadsheets, so we need to use a different package. The readxl package is a common package used for reading data from the Excel spreadsheet file. To specify the sheet, use the sheet = sheet_number argument.\n\nxlsx_data &lt;- readxl::read_excel(here::here(\"modules/project-structure/data/penguins.xlsx\"))\n\nxlsx_data\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\n\n\n\n\nThe RDS or R Data Serialization files are a common format for saving R objects in RStudio to a file.\n\n\n\n\n\n\nImport RDS\n\n\n\n.RDS can be read with read_rds() from the readr package.\n\nrds_data &lt;- readr::read_rds(here::here(\"modules/project-structure/data/penguins.rds\"))\n\nrds_data\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n\n\n\nSo far, we only learned how to import data locally (from our computer). Now, we are going to look at how we can read data from online sources. A good starting place is from TidyTuesday project. We can download the data by providing the URL inside the read function. For example, if we want to download a CSV file from the TidyTuesday website, here is what the code would look like:\n\nURL &lt;- \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-07/rainfall.csv\"\n\ndata &lt;- readr::read_csv(URL)\n\nRows: 179273 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): station_code, city_name, month, day, quality, station_name\ndbl (5): year, rainfall, period, lat, long\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndata\n\n# A tibble: 179,273 × 11\n   station_code city_name  year month day   rainfall period quality   lat  long\n   &lt;chr&gt;        &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 009151       Perth      1967 01    01          NA     NA &lt;NA&gt;    -32.0  116.\n 2 009151       Perth      1967 01    02          NA     NA &lt;NA&gt;    -32.0  116.\n 3 009151       Perth      1967 01    03          NA     NA &lt;NA&gt;    -32.0  116.\n 4 009151       Perth      1967 01    04          NA     NA &lt;NA&gt;    -32.0  116.\n 5 009151       Perth      1967 01    05          NA     NA &lt;NA&gt;    -32.0  116.\n 6 009151       Perth      1967 01    06          NA     NA &lt;NA&gt;    -32.0  116.\n 7 009151       Perth      1967 01    07          NA     NA &lt;NA&gt;    -32.0  116.\n 8 009151       Perth      1967 01    08          NA     NA &lt;NA&gt;    -32.0  116.\n 9 009151       Perth      1967 01    09          NA     NA &lt;NA&gt;    -32.0  116.\n10 009151       Perth      1967 01    10          NA     NA &lt;NA&gt;    -32.0  116.\n# ℹ 179,263 more rows\n# ℹ 1 more variable: station_name &lt;chr&gt;\n\n\nIt is the same idea as how to import data locally, but instead of providing the computer paths to the function, we use URL instead.\n\n\n\nThere are many more data file types, and the ways to import them can differ. Here are some of an example:\n\n.tsv: Tab Separated Values. These files can be read with read_tsv() from the readr package.\n.fwf: Fixed Width File. These files can be read with read_fwf() from the readr package.\n.txt: Text files. These files can be read differently based on how it was structured. If the data is stored in a consistent table-like structure, you might be able to read it with read_table() from the readr package. If the structure is complex, you likely need to read the data line by line with read_lines() and process the format yourself.\n\n\n\n\n\n\n\nreadr package\n\n\n\nWe encourage you to use the readr package since it is faster than their base equivalents and creates a tibble instead of a data.frame. The tibble is a preferred choice when storing our data, as it has a nicer formatted print output and features to prevent some surprising (and likely incorrect) results. For example, it will identify dates/datetimes and parse them appropriately."
  },
  {
    "objectID": "modules/project-structure/02-importing-exporting.html#comma-separated-values",
    "href": "modules/project-structure/02-importing-exporting.html#comma-separated-values",
    "title": "Importing and Exporting data file",
    "section": "",
    "text": "CSV or Comma Separated Values is one of the most common data files you will be working with. The value inside the file is separated by , and rows are separated by new lines.\n\n\n\n\n\n\nImport CSV:\n\n\n\n.csv can be read with read_csv() from the readr package.\n\ncsv_data &lt;- readr::read_csv(here::here(\"modules/project-structure/data/penguins.csv\"))\n\nRows: 344 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): species, island, sex\ndbl (5): bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncsv_data\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;"
  },
  {
    "objectID": "modules/project-structure/02-importing-exporting.html#excel-spreadsheets",
    "href": "modules/project-structure/02-importing-exporting.html#excel-spreadsheets",
    "title": "Importing and Exporting data file",
    "section": "",
    "text": "The .xls and .xlsx are Excel spreadsheets. These could contain anything and require a careful inspection to import it correctly. The file will often contain a different sheet, so you need to specify the sheet you want to import.\n\n\n\n\n\n\nImport Excel\n\n\n\nThe readr package does not allow us to import Excel spreadsheets, so we need to use a different package. The readxl package is a common package used for reading data from the Excel spreadsheet file. To specify the sheet, use the sheet = sheet_number argument.\n\nxlsx_data &lt;- readxl::read_excel(here::here(\"modules/project-structure/data/penguins.xlsx\"))\n\nxlsx_data\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;"
  },
  {
    "objectID": "modules/project-structure/02-importing-exporting.html#rds",
    "href": "modules/project-structure/02-importing-exporting.html#rds",
    "title": "Importing and Exporting data file",
    "section": "",
    "text": "The RDS or R Data Serialization files are a common format for saving R objects in RStudio to a file.\n\n\n\n\n\n\nImport RDS\n\n\n\n.RDS can be read with read_rds() from the readr package.\n\nrds_data &lt;- readr::read_rds(here::here(\"modules/project-structure/data/penguins.rds\"))\n\nrds_data\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "modules/project-structure/02-importing-exporting.html#online-sources",
    "href": "modules/project-structure/02-importing-exporting.html#online-sources",
    "title": "Importing and Exporting data file",
    "section": "",
    "text": "So far, we only learned how to import data locally (from our computer). Now, we are going to look at how we can read data from online sources. A good starting place is from TidyTuesday project. We can download the data by providing the URL inside the read function. For example, if we want to download a CSV file from the TidyTuesday website, here is what the code would look like:\n\nURL &lt;- \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-07/rainfall.csv\"\n\ndata &lt;- readr::read_csv(URL)\n\nRows: 179273 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): station_code, city_name, month, day, quality, station_name\ndbl (5): year, rainfall, period, lat, long\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndata\n\n# A tibble: 179,273 × 11\n   station_code city_name  year month day   rainfall period quality   lat  long\n   &lt;chr&gt;        &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 009151       Perth      1967 01    01          NA     NA &lt;NA&gt;    -32.0  116.\n 2 009151       Perth      1967 01    02          NA     NA &lt;NA&gt;    -32.0  116.\n 3 009151       Perth      1967 01    03          NA     NA &lt;NA&gt;    -32.0  116.\n 4 009151       Perth      1967 01    04          NA     NA &lt;NA&gt;    -32.0  116.\n 5 009151       Perth      1967 01    05          NA     NA &lt;NA&gt;    -32.0  116.\n 6 009151       Perth      1967 01    06          NA     NA &lt;NA&gt;    -32.0  116.\n 7 009151       Perth      1967 01    07          NA     NA &lt;NA&gt;    -32.0  116.\n 8 009151       Perth      1967 01    08          NA     NA &lt;NA&gt;    -32.0  116.\n 9 009151       Perth      1967 01    09          NA     NA &lt;NA&gt;    -32.0  116.\n10 009151       Perth      1967 01    10          NA     NA &lt;NA&gt;    -32.0  116.\n# ℹ 179,263 more rows\n# ℹ 1 more variable: station_name &lt;chr&gt;\n\n\nIt is the same idea as how to import data locally, but instead of providing the computer paths to the function, we use URL instead."
  },
  {
    "objectID": "modules/project-structure/02-importing-exporting.html#additional-types",
    "href": "modules/project-structure/02-importing-exporting.html#additional-types",
    "title": "Importing and Exporting data file",
    "section": "",
    "text": "There are many more data file types, and the ways to import them can differ. Here are some of an example:\n\n.tsv: Tab Separated Values. These files can be read with read_tsv() from the readr package.\n.fwf: Fixed Width File. These files can be read with read_fwf() from the readr package.\n.txt: Text files. These files can be read differently based on how it was structured. If the data is stored in a consistent table-like structure, you might be able to read it with read_table() from the readr package. If the structure is complex, you likely need to read the data line by line with read_lines() and process the format yourself.\n\n\n\n\n\n\n\nreadr package\n\n\n\nWe encourage you to use the readr package since it is faster than their base equivalents and creates a tibble instead of a data.frame. The tibble is a preferred choice when storing our data, as it has a nicer formatted print output and features to prevent some surprising (and likely incorrect) results. For example, it will identify dates/datetimes and parse them appropriately."
  },
  {
    "objectID": "modules/installation/02-basics.html",
    "href": "modules/installation/02-basics.html",
    "title": "RStudio basics",
    "section": "",
    "text": "Background\nRStudio is an Integrated Development Environment (IDE) developed by Posit for R programming language. It includes tools for script editing, R console output, data viewing, and plotting, making it easier for an analyst to explore, visualise, and conduct analysis on the data in a single environment.\n\n\nWhat does it look like?\nThe default appearances of the RStudio user interface contains 4 primary panes:\n\nSource pane\nConsole pane\nEnvironment pane\nOutput pane\n\nThe first time you open the RStudio, you will be greeted by the three panes: console, environment, and output. We will talk about the Source pane later in the chapter.\n\n\n\n\n\n\n\n\n\nOn the top right-hand side, you have the Environment pane, which includes the Environment, History, Connections, Build, and Version Control System (VCS) tabs. We will focus on the Environment tab, which shows the currently saved R objects.\nOutput pane, located at the bottom-right of the app, is used to display various outputs such as plots, HTML content, or files directory. You can interact with it as well, not just for shows. For example, in the “Files” tab, you can add new folders, new blank files, delete/rename, and more.\nOn the left-hand side, you have the Console pane, which is the place where you can type out the command written in the R language and execute it immediately on your computer.\n\n\n\n\n\n\nImportant\n\n\n\nYou can run the R code inside the Console, but once you close RStudio, you will lose all the code.\n\n\nTo make your work reproducible, you should write and store all the code in the R Script (.R). It will show up in the Source pane, allowing you to view and edit various code-related files.\n\n\n\n\n\n\n\n\n\n\n\nR Script\nThere are multiple ways of adding the R Script. To get started, click on the paper with a plus symbol and choose R Script.\n\n\n\n\n\n\n\n\n\nIn an R Script, you can write code and add comments. Also, you can run each line of code by pressing ctrl + enter/return on Windows and Linux or cmd + enter/return on Macs. The code messages will shown in the Console.\n\n\n\n\n\n\nCreate R script\n\n\n\nThere is a shortcut key for creating a new R Script, which is ctrl + shift + N for Windows and Linux or cmd + shift + N for Macs.\n\n\n\n\nR packages installation and loading\nAn R package bundles all useful functions, help files, and data sets that help extend the functionality into a package. To start installing the package, navigate to the “Packages” tab in the Output pane. It will show you what packages you currently have. Next, click “Install”, and you should be able to see the pop-up window. Type the package name you want to install in the “Packages” field. You need to make sure that you install all the dependencies by clicking on the box labeled “Install dependencies”. Then click “Install”, you are now ready to start using the new package.\nAlternatively, you can install the package by running install.packages(\"package_name\") in the Console pane. The packages only need to be installed once, and install.packages() should not be kept or commented out in the R code.\n\n\n\n\n\n\nDefault packages\n\n\n\nR, by default, comes bundled with some basic packages that are always loaded, including base (for basic things like + and log()), utils (for utility functions like install.packages()), and stats (for statistical models like lm() and arima()).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow that you have a package installed, you can bring it to your current working environment by typing library(package_name) in the Console pane. All of the package’s functions, data sets, and help files are now available for you to use until you close your current R session. So, if you have closed it, you will need to load the R packages again.\nYou should load the packages you used at the top of the R Script. This way, you do not need to remember which packages you need in the script. It is also a good practice to do.\n\n\n\n\n\n\nImportant\n\n\n\nYou may have noticed we do not use quotation marks when calling the package in the library function. You have options to use them if you like for this function. However, the quotation marks are necessary for the install.packages function.\n\n\n\n\n\n\n\n\nYour turn!\n\n\n\nIt is now your turn to try out the package installation process. What you need to do is to get the palmerpenguins package so we can have a look at the penguin’s data.\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code"
  },
  {
    "objectID": "modules/quarto-basics/index.html",
    "href": "modules/quarto-basics/index.html",
    "title": "Quarto Basics",
    "section": "",
    "text": "Quarto is a free, open-source system that helps you create interactive and reproducible documents easily."
  },
  {
    "objectID": "modules/quarto-basics/index.html#sweave",
    "href": "modules/quarto-basics/index.html#sweave",
    "title": "Quarto Basics",
    "section": "Sweave",
    "text": "Sweave\nSweave was one of the first tools for literate programming in R, allowing users to embed R code in LaTeX documents, combining R’s statistical power with LaTeX’s typesetting."
  },
  {
    "objectID": "modules/quarto-basics/index.html#r-markdown",
    "href": "modules/quarto-basics/index.html#r-markdown",
    "title": "Quarto Basics",
    "section": "R Markdown",
    "text": "R Markdown\nR Markdown is a modern alternative to Sweave, enabling the integration of text and R code in various output formats like HTML, PDF, and Word, not just LaTeX."
  },
  {
    "objectID": "modules/quarto-basics/index.html#quarto",
    "href": "modules/quarto-basics/index.html#quarto",
    "title": "Quarto Basics",
    "section": "Quarto",
    "text": "Quarto\nWhich leads us to Quarto, a new system that enhances the R Markdown ecosystem. Quarto provides a seamless framework for integrating code, text, and visualisations into a single, interactive, and reproducible document."
  },
  {
    "objectID": "modules/quarto-basics/index.html#setting-up-quarto",
    "href": "modules/quarto-basics/index.html#setting-up-quarto",
    "title": "Quarto Basics",
    "section": "Setting Up Quarto",
    "text": "Setting Up Quarto\nTo get started with Quarto, you will need to install Quarto. You can do this by here.\nOnce you have installed Quarto, you can create a new Quarto document by:\n\nGo to the File menu in RStudio\nSelect New File &gt; New File &gt; Quarto Document\n\n\n\n\n\n\n\nChoose the document type: Document, Presentation, or Interactive.\n\n\n\n\n\n\nA Quarto file is a plain text file with the extension .qmd.\nNow that you’ve got your first quarto document up and ready, let’s explore some key components! These include:\n\nA YAML header\nChunks of R code\nMarkdown text"
  },
  {
    "objectID": "modules/quarto-basics/index.html#yaml",
    "href": "modules/quarto-basics/index.html#yaml",
    "title": "Quarto Basics",
    "section": "YAML",
    "text": "YAML\nWhen you open up your first quarto document, you will notice a block of text up the top that looks something like this:\n\n\n\n\n\nThis is the YAML header, which contains metadata about your document, including the title, author, and editor. It allows you to edit the document’s title (currently “Untitled”), specifies that the output will be in HTML format, and indicates that the document will open in the visual editor by default.\n\n\n\n\n\n\nSource vs Visual Editor\n\n\n\nRStudio v1.4 or higher includes Visual Markdown editing. Instead of markdown syntax (e.g., bolding with double asterisks), you can format text, add images and insert tables using a toolbar or keyboard commands, similar to a word processor. View sections 28.3 and 28.4 for more detail.\n\n\nBeyond the basics, you can add some real handy components to the YAML\n\n\n\nauthor\nFor assignments especially, its good to include your name and potentially student ID with this section in the YAML.\n\n\nsubtitle\nFor reports it may be nice to add a subtitle for further detail.\n\n\ntoc\nA table of contents can be a useful tool in structuring your document. toc-depth specifies the level of headings to include (e.g. toc-depth: 2 includes the top-level headings and second-level headings in the toc.)\n\n\ndate\nIf you’d like to include the due date or publishing date of the report.\n\n\n\n\n\n\n\n\n\n\n\n\n\nYAML Structure\n\n\n\nThe structure of a YAML can be a little finicky, and errors may occur if it is not formatted correctly. If you encountering errors or missing components - it may be worthwhile to cross-check. A useful starting point is the Quarto documentation."
  },
  {
    "objectID": "modules/quarto-basics/index.html#r-code-chunks",
    "href": "modules/quarto-basics/index.html#r-code-chunks",
    "title": "Quarto Basics",
    "section": "R Code Chunks",
    "text": "R Code Chunks\nCode chunks refer to sections in the document where you can write and execute code. These chunks are enclosed by three backticks followed by the name of the language you are using (e.g., r for R code). Code chunks can be included in three ways:\n\nKeyboard commands: Ctrl + Alt + I (Windows) or Cmd + Option + I (Mac)\nClicking the Insert button in the toolbar (top right):\n\n\n\n\n\n\n\nTyping the code chunk manually:\n\n\n\n\n\n\nWrite the code you want to include within the chunk and when you run it, the output will be displayed directly below the chunk!\n\n\n\n\n\n\nDid you know\n\n\n\nCode doesn’t have to be in a chunk! You can also include inline code by using backticks (``) around code you would like to run in text.\n\n\nYou can also add options to the code chunk to control how the code is executed and displayed. For example, you can specify the output format, the width and height of plots, and whether the code should be displayed in the output.\n\n\n\n\n\nLook at the image of the code chunk above, you can see that the chunk has the following options:\nfig-cap: This option allows you to add a caption to the figure.\nfig-width: This option specifies the width of the figure.\necho: This option controls whether the code in the chunk is displayed in the output.\nThese are only a couple examples of options for chunk options, and there are many more available. You can find a full list of chunk options in section 28.5.2 as well as further discussion in Communicating with Quarto.\n\n\n\n\n\n\nGlobal Options\n\n\n\nTo set global options for all code chunks, add them in the YAML header under execute:. Indent the options you want to apply by pressing tab on the next line."
  },
  {
    "objectID": "modules/quarto-basics/index.html#headings",
    "href": "modules/quarto-basics/index.html#headings",
    "title": "Quarto Basics",
    "section": "Headings",
    "text": "Headings\nHeadings are created using the # symbol followed by the heading text. The number of # symbols indicates the level of the heading. For example, # creates a first-level heading, ## creates a second-level heading, and so on."
  },
  {
    "objectID": "modules/quarto-basics/index.html#text-formatting",
    "href": "modules/quarto-basics/index.html#text-formatting",
    "title": "Quarto Basics",
    "section": "Text Formatting",
    "text": "Text Formatting\nJust like in any other word processors, you can also format your text. Here are some examples:\n\nBold: **bold** or __bold__\nItalic: *italic* or _italic_\nStrikethrough: ~~strikethrough~~\nCode: `code`"
  },
  {
    "objectID": "modules/quarto-basics/index.html#lists",
    "href": "modules/quarto-basics/index.html#lists",
    "title": "Quarto Basics",
    "section": "Lists",
    "text": "Lists\nLists can be created using *. You can also create nested lists by indenting the items with spaces.\n\n\n\n\n\n\nChecklist\n\n\n\nYou can also create checklists in Quarto! This can be done by using - [ ] for an empty box and - [x] for a checked box."
  },
  {
    "objectID": "modules/quarto-basics/index.html#test-your-knowledge",
    "href": "modules/quarto-basics/index.html#test-your-knowledge",
    "title": "Quarto Basics",
    "section": "Test your knowledge",
    "text": "Test your knowledge\n** potentially a multiple choice question here about different common chunk options and what they do ??**\n** interactive component to edit a basic yaml / include things in yaml – pain point: warnings, messages = false, toc **"
  },
  {
    "objectID": "modules/linear-regression/index.html",
    "href": "modules/linear-regression/index.html",
    "title": "Linear regression with R",
    "section": "",
    "text": "Linear regression is a statistical method used to model the relationship between a dependent variable and one or more independent variables. It aims to find the best-fitting linear relationship that describes how the dependent variable changes in response to the independent variable(s). This technique is of key importance in statistics and data science and is used extensively for predictive analysis.\nSimple linear regression refers to fitting a straight line to a set of data points to model the relationship between a single independent variable and a dependent variable. The equation of a simple linear regression model is given by: \\(y = \\beta_0 + \\beta_1x + \\epsilon\\), where \\(y\\) is the dependent variable, \\(x\\) is the independent variable, \\(\\beta_0\\) is the intercept, \\(\\beta_1\\) is the slope, and \\(\\epsilon\\) is the error term that follows a normal distribution with zero mean and constant variance \\(\\sigma^2\\).\n\n\n\n\n\n\nYour turn!\n\n\n\nConsider the following plot with dist as the dependent variable and speed as the independent variable:\n\nlibrary(ggplot2)\nggplot(cars, aes(speed, dist)) +\n  geom_point()\n\n\n\n\n\n\n\n\nWhat is the approximate best intercept and slope for the data?\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code"
  },
  {
    "objectID": "modules/linear-regression/index.html#introduction",
    "href": "modules/linear-regression/index.html#introduction",
    "title": "Linear regression with R",
    "section": "",
    "text": "Linear regression is a statistical method used to model the relationship between a dependent variable and one or more independent variables. It aims to find the best-fitting linear relationship that describes how the dependent variable changes in response to the independent variable(s). This technique is of key importance in statistics and data science and is used extensively for predictive analysis.\nSimple linear regression refers to fitting a straight line to a set of data points to model the relationship between a single independent variable and a dependent variable. The equation of a simple linear regression model is given by: \\(y = \\beta_0 + \\beta_1x + \\epsilon\\), where \\(y\\) is the dependent variable, \\(x\\) is the independent variable, \\(\\beta_0\\) is the intercept, \\(\\beta_1\\) is the slope, and \\(\\epsilon\\) is the error term that follows a normal distribution with zero mean and constant variance \\(\\sigma^2\\).\n\n\n\n\n\n\nYour turn!\n\n\n\nConsider the following plot with dist as the dependent variable and speed as the independent variable:\n\nlibrary(ggplot2)\nggplot(cars, aes(speed, dist)) +\n  geom_point()\n\n\n\n\n\n\n\n\nWhat is the approximate best intercept and slope for the data?\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Monash EBS LearnR modules",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nCategories\n\n\n\n\n\n\nData wrangling with R\n\n\n \n\n\n\n\nGetting started with R and RStudio\n\n\n \n\n\n\n\nImporting and Exporting data file\n\n\n \n\n\n\n\nLinear regression with R\n\n\n \n\n\n\n\nProject structure\n\n\n \n\n\n\n\nQuarto Basics\n\n\n \n\n\n\n\nR programming basics\n\n\n \n\n\n\n\nRStudio basics\n\n\n \n\n\n\n\nTroubleshooting and asking for help\n\n\n \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "modules/basic/index.html",
    "href": "modules/basic/index.html",
    "title": "R programming basics",
    "section": "",
    "text": "One of the simplest thing that you can do with R is to use it as a calculator. Here are some common arithmetic operations:\n\nAddition: +\nSubtraction: -\nMultiplication: *\nDivision: /\nExponentiation: ^\nModulo: %%\n\nThe ^ operator raises the number to its left to the power of the number to its right. For example, if you enter 2^3, you will get the answer of 2 to the power 3, which is 8.\nThe %% operator returns the remainder when the number on the left is divided by the number on the right. For example, 7 %% 3 results in 1 because 7 divided by 3 leaves a remainder of 1.\n\n\n\n\n\n\nAdding comments\n\n\n\nNote that you can add comment to your code using the # symbol. This is helpful when you want to take notes as you go, so that you can follow your R code when you come back to revise in a few weeks time!\n\n\n\n\n\nA basic concept in programming is called a variable. A variable allows you to store a value (e.g. 8) or an object (e.g. a piece of string) in R. You can then later use this variable’s name to easily access the value or the object that is stored within this variable.\nWe can assign the result of our arithmetic operations (which is a value), for instance, 2^3 to a variable named my_result using the following command: my_result &lt;- 2^3\nNow, when you evaluate the value of the variable my_result by running it, you will get the value of 8.\n\n\n\n\n\n\nYour turn!\n\n\n\nNow it’s your turn to try variable assignment and some simple arithmetic operations in R!\nHINT 💡: Let’s say you would like to assign the result of summing from 1 to 5 to a variable named sum_to_five. You can do: sum_to_five &lt;- 1+2+3+4+5\nNow if you would like to divide sum_to_five by 5 and assign the result to average, you can do: average &lt;- sum_to_five/5\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\n\n\n\nPipes allow you to sequence a series of operations in a clear and readable way. There are two types of pipe operators in R. %&gt;%, which is part of the magrittr package and native pipe operator |&gt; introduced in R 4.1.0. The pipe operator takes the output of the operation on its left and feeds it as the first argument to the function on its right. For example:\n\nresult &lt;- 1:10 |&gt; mean()\nresult\n\n[1] 5.5\n\n\nHere the pipe takes the sequence from 1 to 10 and passes it to the mean() function, which calculates the mean.\nFor further information on the pipe operators and their differences, refer here.\n\n\n\n\n\n\nYour turn!\n\n\n\nTry using the pipe operator to calculate the sum of the sequence from 1 to 10 and assign the result to the variable result.\nHINT 💡: You can use the |&gt; operator to pass the sequence from 1 to 10 to the sum() function and assign it to result with &lt;-.\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code"
  },
  {
    "objectID": "modules/basic/index.html#arithmetic-operations",
    "href": "modules/basic/index.html#arithmetic-operations",
    "title": "R programming basics",
    "section": "",
    "text": "One of the simplest thing that you can do with R is to use it as a calculator. Here are some common arithmetic operations:\n\nAddition: +\nSubtraction: -\nMultiplication: *\nDivision: /\nExponentiation: ^\nModulo: %%\n\nThe ^ operator raises the number to its left to the power of the number to its right. For example, if you enter 2^3, you will get the answer of 2 to the power 3, which is 8.\nThe %% operator returns the remainder when the number on the left is divided by the number on the right. For example, 7 %% 3 results in 1 because 7 divided by 3 leaves a remainder of 1.\n\n\n\n\n\n\nAdding comments\n\n\n\nNote that you can add comment to your code using the # symbol. This is helpful when you want to take notes as you go, so that you can follow your R code when you come back to revise in a few weeks time!"
  },
  {
    "objectID": "modules/basic/index.html#variable-assignment",
    "href": "modules/basic/index.html#variable-assignment",
    "title": "R programming basics",
    "section": "",
    "text": "A basic concept in programming is called a variable. A variable allows you to store a value (e.g. 8) or an object (e.g. a piece of string) in R. You can then later use this variable’s name to easily access the value or the object that is stored within this variable.\nWe can assign the result of our arithmetic operations (which is a value), for instance, 2^3 to a variable named my_result using the following command: my_result &lt;- 2^3\nNow, when you evaluate the value of the variable my_result by running it, you will get the value of 8.\n\n\n\n\n\n\nYour turn!\n\n\n\nNow it’s your turn to try variable assignment and some simple arithmetic operations in R!\nHINT 💡: Let’s say you would like to assign the result of summing from 1 to 5 to a variable named sum_to_five. You can do: sum_to_five &lt;- 1+2+3+4+5\nNow if you would like to divide sum_to_five by 5 and assign the result to average, you can do: average &lt;- sum_to_five/5\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code"
  },
  {
    "objectID": "modules/basic/index.html#introduction-to-pipes",
    "href": "modules/basic/index.html#introduction-to-pipes",
    "title": "R programming basics",
    "section": "",
    "text": "Pipes allow you to sequence a series of operations in a clear and readable way. There are two types of pipe operators in R. %&gt;%, which is part of the magrittr package and native pipe operator |&gt; introduced in R 4.1.0. The pipe operator takes the output of the operation on its left and feeds it as the first argument to the function on its right. For example:\n\nresult &lt;- 1:10 |&gt; mean()\nresult\n\n[1] 5.5\n\n\nHere the pipe takes the sequence from 1 to 10 and passes it to the mean() function, which calculates the mean.\nFor further information on the pipe operators and their differences, refer here.\n\n\n\n\n\n\nYour turn!\n\n\n\nTry using the pipe operator to calculate the sum of the sequence from 1 to 10 and assign the result to the variable result.\nHINT 💡: You can use the |&gt; operator to pass the sequence from 1 to 10 to the sum() function and assign it to result with &lt;-.\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code"
  },
  {
    "objectID": "modules/basic/index.html#basic-objects-in-r-1",
    "href": "modules/basic/index.html#basic-objects-in-r-1",
    "title": "R programming basics",
    "section": "Basic Objects in R",
    "text": "Basic Objects in R\nThere are numerous data types in R. Here are some of the basic ones:\n\nnumerics: numerical values\nlogical: boolean values (TRUE or FALSE)\ncharacters: String (a piece of text) like ‘some text’ or “some text”.\n\n\n\n\n\n\n\nCharacters and Strings\n\n\n\nNote that we use quotation marks to indicate if a value is a string.\n\n\n\nChecking the data types\nYou can check the data type of a variable with the class() function. This is a useful function because matching data types are often necessary when performing operations in R. For example, you will get an error message if you try to evaluate 5 + \"6\" since the quotation marks would make 6 a character.\n\n\nMore on numerics: Integer vs Double\nThe two most common numeric classes are “integer” and “double” (for double precision floating point numbers). “Integers” are whole numbers like 7. “Double” are decimal values like 5.217. R uses double precision numeric values by default.\n\ndb_var &lt;- 7\nclass(db_var)\n\n[1] \"numeric\"\n\n\nTo create integer values, you can add L after the number.\n\nint_var &lt;- 7L\nclass(int_var)\n\n[1] \"integer\"\n\n\n\n\n\n\n\n\nYour turn!\n\n\n\nPlay around with different variable types!\nHINT 💡: Replace the values in the R code with values that are provided in the instructions (the line with the comment #). For example, weather &lt;- \"sunny\" assigns the string “sunny” to the variable weather.\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code"
  },
  {
    "objectID": "modules/basic/index.html#missing-values",
    "href": "modules/basic/index.html#missing-values",
    "title": "R programming basics",
    "section": "Missing Values",
    "text": "Missing Values\nThere are several special values in R, including NA, NaN, and Inf.\nNA\nNA (short for ‘Not Available’), is a logical constant of length 1 which contains a missing value indicator. We use NA to replace an entry of a vector when such value is unknown or missing. There are different types of NA for different class, including NA_integer_, NA_real_, NA_complex_ and NA_character_. NA_integer is of the integer class and so on.\nMost operations on an NA becomes an NA. For instance,\n\nx &lt;- c(1, 2, NA, 4)\nsum(x)\n\n[1] NA\n\n\nHowever, there is an exception - when we use the paste() function to concatenate NA with other strings. The operation will be performed with the NA.\n\nsome_string &lt;- c(\"Apple\",\"Banana\", NA, \"Orange\")\npaste(some_string, \" is good for you.\")\n\n[1] \"Apple  is good for you.\"  \"Banana  is good for you.\"\n[3] \"NA  is good for you.\"     \"Orange  is good for you.\"\n\n\nWe can use is.na() to test if a values is NA. The function is.na(x) returns a boolean vector of the same size as x with value TRUE if the corresponding element in x is NA.\n\nis.na(x)\n\n[1] FALSE FALSE  TRUE FALSE\n\n\nNaN\nNaN (short for ‘Not A Number’) is for arithmetic purposes. NaN usually comes from arithmetic operations that create undefined values such as 0/0, hence NaN is numeric. You can also use is.na() to check if a value is NaN.\n\ny &lt;- c(4, 0/0, 3,5)\nis.na(y)\n\n[1] FALSE  TRUE FALSE FALSE\n\n\nInf\nInf (short for Infinite), like NaN, also stems from numerical operations and thus is of numeric class. It usually comes operations like 1/0 where the result is a very very large number (larger than other numeric). Note that Inf is not a type of NA. You can use is.infinite() to check if a value is Inf.\n\nis.infinite(23/0)\n\n[1] TRUE"
  },
  {
    "objectID": "modules/basic/index.html#vector-operations",
    "href": "modules/basic/index.html#vector-operations",
    "title": "R programming basics",
    "section": "Vector Operations",
    "text": "Vector Operations\n\nVector addition and subtraction\nIf a and b are vectors of the same size, a+b and a-b give their sum and difference, respectively.\n\na &lt;- c(1,2,3)\nb &lt;- c(100,200,300)\na+b\n\n[1] 101 202 303\n\n\n\na-b\n\n[1]  -99 -198 -297\n\n\n\n\n\n\n\n\nYour turn!\n\n\n\nTry adding and subtracting vectors!\nHINT 💡: Make sure you’re assigning a variable with the elements you want in your vector. For example, if you want to create a vector y with elements 1, 2, 3, and 4, you can do y &lt;- c(1, 2, 3, 4) and likewise with the vector you’re adding or subtracting by.\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\n\n\nScalar-vector multiplication and division\nIf c is a number and a is a vector, you can express the scalar-vector product either as c*a or a*c. For example, if you do a 3*a and a*3:\n\na &lt;- c(1,2,3)\n3*a\n\n[1] 3 6 9\n\na*3\n\n[1] 3 6 9\n\n\n\n\nScalar-vector addition\nIn R, you can add a scalar to a vector. This means that the scalar is added to each element of the vector. For example, if you do 3+a:\n\na &lt;- c(1,2,3)\n3+a\n\n[1] 4 5 6\n\n\n\n\n\n\n\n\nImportant\n\n\n\nNote this is NOT a standard mathematical notation.\n\n\n\n\nIndexing and Slicing\n\nIndexing\nA specific element \\(x_i\\) where \\(i\\) is the index.\nSay we would like to obtain the 5th entry from the following vector \\(x\\):\n\nx = c(5,6,3,4,5,8,23,4,6,4,3,23,7,5,4,23,7,90)\n# Extracting the 5th entry from the vector\nx[5]\n\n[1] 5\n\n\n\n\nSlicing\n\\(x_{r:s}\\) denotes the slice of the vector from index \\(i\\) to \\(s\\). For instance, x[1:4] selects the element from index 1 to 4.\n\nx[1:4]\n\n[1] 5 6 3 4\n\n\n\n\n\n\n\n\nYour turn!\n\n\n\nLets try slicing and extracting elements from a vector!\nHINT 💡: If you would like to extract the 3rd element from the vector y, you can do y[3]. If you would like to extract the 2nd to 4th element from the vector y, you can do y[2:4].\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\nNothing here (yet)!"
  },
  {
    "objectID": "modules/basic/index.html#matrix-operations",
    "href": "modules/basic/index.html#matrix-operations",
    "title": "R programming basics",
    "section": "Matrix Operations",
    "text": "Matrix Operations\nSimilar to what you have learned with vectors, the standard operators like +, -, *, / can be used to perform element-wise operations on matrices. For example:\n\n2 * A\n\n     [,1] [,2] [,3]\n[1,]    8    6    4\n[2,]   14    8    4\n[3,]   12    6    8\n[4,]    6    0    0\n[5,]    4   -4   -6\n\n\nwhich multiplies each element of the matrix A by 2.\nConsider another matrix B defined as\n\nB &lt;- matrix(c(1,1,1,2,2,2,0,0,0,-1,-1,-1,0,0,0), byrow=TRUE, nrow=5)\n\nA*B creates a matrix where each element is the product of the corresponding elements in matrix A and matrix b.\n\nA*B\n\n     [,1] [,2] [,3]\n[1,]    4    3    2\n[2,]   14    8    4\n[3,]    0    0    0\n[4,]   -3    0    0\n[5,]    0    0    0\n\n\n\n\n\n\n\n\nMatrix Multiplication\n\n\n\nRemember A*B is element-wise multiplication, not matrix multiplication. If you want to perform matrix multiplication, you can use the %*% operator. For example, A %*% B performs matrix multiplication."
  },
  {
    "objectID": "modules/basic/index.html#add-rows-or-columns-to-a-matrix",
    "href": "modules/basic/index.html#add-rows-or-columns-to-a-matrix",
    "title": "R programming basics",
    "section": "Add rows or columns to a matrix",
    "text": "Add rows or columns to a matrix\nSometimes we may want to add new data or information to a matrix with more rows or columns.\nYou can use cbind() function, which merges matrices and/or vectors by columns, to add a column to a matrix. For example:\n\nA &lt;- matrix(c(4,3,2,7,4,2,6,3,4,3,0,0,2,-2,-3), byrow=TRUE, nrow=5)\nB &lt;- matrix(c(1,1,1,2,2,2,0,0,0,-1,-1,-1,0,0,0), byrow=TRUE, nrow=5)\nbig_matrix &lt;- cbind(A, B)\n# Matrix A\nA\n\n     [,1] [,2] [,3]\n[1,]    4    3    2\n[2,]    7    4    2\n[3,]    6    3    4\n[4,]    3    0    0\n[5,]    2   -2   -3\n\n# Matrix B\nB\n\n     [,1] [,2] [,3]\n[1,]    1    1    1\n[2,]    2    2    2\n[3,]    0    0    0\n[4,]   -1   -1   -1\n[5,]    0    0    0\n\n# Binding the two matrices\nbig_matrix\n\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]    4    3    2    1    1    1\n[2,]    7    4    2    2    2    2\n[3,]    6    3    4    0    0    0\n[4,]    3    0    0   -1   -1   -1\n[5,]    2   -2   -3    0    0    0\n\n\nYou can see the resulting matrix of merging A and B has 5 rows and 6 columns.\nSimilarly, you can use rbind() function to add a row to a matrix. For example:\n\nbig_matrix2 &lt;- rbind(A,B)\nbig_matrix2\n\n      [,1] [,2] [,3]\n [1,]    4    3    2\n [2,]    7    4    2\n [3,]    6    3    4\n [4,]    3    0    0\n [5,]    2   -2   -3\n [6,]    1    1    1\n [7,]    2    2    2\n [8,]    0    0    0\n [9,]   -1   -1   -1\n[10,]    0    0    0\n\n\nWhere big_matrix2 &lt;- rbind(A,B) returns a bigger matrix by putting matrix A on top of matrix B. The resulting matrix has 10 rows and 3 columns."
  },
  {
    "objectID": "modules/basic/index.html#indexing-1",
    "href": "modules/basic/index.html#indexing-1",
    "title": "R programming basics",
    "section": "Indexing",
    "text": "Indexing\nYou can use square brackets ([]) and a comma (,) to select one or multiple elements from a matrix. While vectors have one dimension, matrices have two. Therefore, you need to specify both the row and column indices, separated by a comma, to select an element.\nFor example, A[1:4, 3:5] returns a matrix with the data on the rows 1,2,3,4 and columns 3,4,5. If you want to select all elements of a row or a column, you can do the following:\n\nA[,1] selects all elements of the first column of matrix A.\n\n\n\n\n\n\n\n\n\nYour turn!\n\n\n\nConsider the following matrices S and T:\n\\[S = \\begin{bmatrix}1&0\\\\0&1\\end{bmatrix}, T = \\begin{bmatrix}2&2\\\\4&3\\end{bmatrix}\\]\n\nConstruct a matrix M by stacking S on top of T. Assign your result to the variable M_mat.\nSelect a sub-matrix of M with the data on the rows 1, 2, 3 and columns 2. Assign the result to the variable part_of_M.\n\nHINT 💡: To stack one matrix on top of another, we can use the rbind() command. HINT 2 💡: For example, B[1,2] selects the element at the first row and second column of matrix B. B[1:3,2:4] results in a matrix with the data on the rows 1, 2, 3 and columns 2, 3, 4.\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code"
  },
  {
    "objectID": "modules/basic/index.html#data-frames-1",
    "href": "modules/basic/index.html#data-frames-1",
    "title": "R programming basics",
    "section": "Data Frames",
    "text": "Data Frames\nA data frame has the variables of a dataset as columns and the observations as rows.\n\n\n\n\n\n\nYour turn!\n\n\n\nLet’s look at an example. Just run the code and you will see what a data frame looks like in R.\nHINT 💡: Simply run the code!\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\nThe iris data set gives the measurements in centimeters of the variables sepal length, sepal width, petal length and petal width, respectively, for 50 flowers from each of 3 species of iris. The species are Iris setosa, versicolor, and virginica.\n\nQuick Look at the Data Frame\nOften it is useful to show only a small part of the entire dataset, especially when we are working with very big data set where showing the entire dataset is not easy. Here are a few useful commands that helps you understand the data frame very quickly.\n\nhead() shows the first few observations of a data frame.\ntail() shows the last few observations of a data frame.\nstr() shows the structure of the dataset.\n\n\n\n\n\n\n\nYour turn!\n\n\n\nInvestigate the structure of the example dataframe. Have a look at the first and last few observations!\nHINT 💡: Try head(df).\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\n\n\n\nCreating Data Frame\nYou can construct your own data frame using data that you have with the data.frame() function. You can include different vectors as argument in the function and they will become different columns of your data frame. Note that you should make sure the vectors that you pass have same length (i.e. same number of observations for each column).\n\n\n\n\n\n\nYour turn\n\n\n\nCreate a data frame using vectors symbol, element, chemical_group and atomic_no, following that order. Assign the result data frame to first_ten_elements.\nHINT 💡: Use the data.frame() function on the vectors.\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\n\n\nIndexing, Selecting Columns and Subset\nSimilar to vectors and matrices, you select elements from a data frame using square brackets [ ].\n\nFor example, if you would like to select row 2 to 4 and column 3 to 5 from a data frame called my_df, you can do my_df[2:4, 3:5].\nWhen you want to select the entire first row of a data frame, you can use `my_df[1, ]\nWhen you want to select the entire first column of a data frame, you can use my_df[,1]\n\nNote that when you select a single column (e.g. my_df[,1]), it turns into a vector. If you would like it to remain as a data frame, you can use my_df[, 1, drop = FALSE].\nAlternatively, if you would like to select a certain variable from the data frame, you can use the column name in the square bracket directly or use $ instead: my_df[ , \"column_name\"] or my_df$column_name.\n\n\nSorting\nSometimes we may want to sort the data according to a certain variable in the dataset. In R, we can use the order() function which gives the ranked position of each element when it is applied on a variable. For example,\n\nx &lt;- c(100, -200,300)\norder(x)\n\n[1] 2 1 3\n\n\nThe output above is the ranked positions and we can use that to sort the vector x.\n\nx[order(x)]\n\n[1] -200  100  300\n\n\nThe above R code gives an ordered version of x.\nNow that we know how to use the order(), let’s sort the first_ten_element data frame in ascending order of atomic_no, assign the sorted dataframe to sorted_df.\n\n\n\n\n\n\nYour turn\n\n\n\nComplete the code below to complete the tasks indicated in the comments.\nHINT 💡: Use order(first_ten_elements$atomic_no) to create positions. Then, use ‘positions’ with square brackets: first_ten_elements[...]; can you fill in the …? Do not forget that ‘positions’ indicates the order of the rows in the data frame.\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code"
  },
  {
    "objectID": "modules/basic/index.html#for-loops",
    "href": "modules/basic/index.html#for-loops",
    "title": "R programming basics",
    "section": "For loops",
    "text": "For loops\nA simple for loop in R looks like this:\n\nsequence &lt;- c(1,3,5)\nfor (i in sequence) {\n  print(i)\n}\n\n[1] 1\n[1] 3\n[1] 5\n\n\nHere, we first defined a vector called sequence, then for every \\(i\\) in sequence, we print the value of \\(i\\). From the output, you can see from the output that each element i in the sequence was printed in each iteration.\nThe same loop can be written in another way:\n\nsequence &lt;- c(1,3,5)\nfor (i in 1:length(sequence)) {\n  print(sequence[i])\n}\n\n[1] 1\n[1] 3\n[1] 5\n\n\nIn the R code above, we use the length() function to measure the length/size of sequence, i.e. 3. Then we construct a for loop where \\(i\\) iterates from 1 to 3, inside the for loop i represents the index of the sequence and putting the index inside the square brackets allows us to select the \\(i\\)th element from sequence.\n\n\n\n\n\n\nYour turn: write your first loop!\n\n\n\nWrite a for loop that takes the nominal GDP (in trillion) for each country in 2017 and divided it by the population (in million) in the same year. Assign the result to the variable my_result.\nHINT 💡: To extract the i-th element of nominalGDP_trilion_2017, you can use nominalGDP_trilion_2017[i]. You can extract the i-th element of population_million_2017 using square bracket as well.\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\nWe can do a lot more than when we use for loop together with the control flow statements (if, else if, else) we learnt before. For example,\n\ncustomer_rating &lt;- c(2,3,1,5,5,5)\n\nfor (rating in customer_rating) {\n  if (rating &gt;= 4) {\n  print('Happy Customer!')\n  } else if (rating &lt;= 2) {\n  print('Angry Customer!')\n  } else {\n  print('Neutral Customer!')\n  }\n}\n\n[1] \"Angry Customer!\"\n[1] \"Neutral Customer!\"\n[1] \"Angry Customer!\"\n[1] \"Happy Customer!\"\n[1] \"Happy Customer!\"\n[1] \"Happy Customer!\"\n\n\nThe R code above prints different messages depending on the values in customer_rating.\nCheck your understanding\nConsider the following syntax:\nfor (result in student_result) {\n  if (result &gt;= 79 & result &lt; 99) {\n  print('Superb!')\n  } else if (result &lt; 50) {\n  print('Try again!')\n  } else if (result &gt;= 99) {\n  print('Perfect!')\n  } else {\n  print('Well done!')\n  }\n}\nHere is the output from the above syntax after we have defined a vector variable student_result.\n[1] \"Superb!\"\n[1] \"Well done!\"\n[1] \"Try again!\"\n[1] \"Perfect!\"\n[1] \"Well done!\"\n[1] \"Superb!\"\nBased on the output from the for-loop, which of the following is student_result?\ncat(mc_opts(\"&lt;code&gt;student_result &lt;- c(99,77,35,97,67,85)&lt;/code&gt;\" =\"Try again! Copy the code and try it with some numbers in R!\",\n         \"&lt;code&gt;student_result &lt;- c(77,99,35,97,67,85)&lt;/code&gt;\" =\"Try again! Copy the code and try it with some numbers in R!\",\n         \"&lt;code&gt;student_result &lt;- c(97,77,35,99,67,85)&lt;/code&gt;\" = \"That's correct!\",\n         \"&lt;code&gt;student_result &lt;- c(100,77,35,99,67,85)&lt;/code&gt;\"=\"Try again! Copy the code and try it with some numbers in R!\",\n         correct = 3))"
  },
  {
    "objectID": "modules/basic/index.html#while-loops",
    "href": "modules/basic/index.html#while-loops",
    "title": "R programming basics",
    "section": "While loops",
    "text": "While loops\nA while loop in R has the following structure:\nwhile (condition) {\n  do_something\n}\nIn the while loop, R will keep running the code between the brackets { } repeated until the condition become FALSE at some point during the execution. If the condition is never changed, the while loop will go on indefinitely.\nFor example, we create a while loop that will go on subtracting 28.5 (as weekly_spending) to the variable bank_balance until bank_balance is less than weekly_spending. If you execute the R code, you will notice the loop stopped at the 7th iteration.\n\nbank_balance &lt;- 200\nweekly_spending &lt;- 28.5\nwhile (bank_balance &gt;= weekly_spending) {\n  bank_balance = bank_balance - weekly_spending\n  print(bank_balance)\n}\n\n[1] 171.5\n[1] 143\n[1] 114.5\n[1] 86\n[1] 57.5\n[1] 29\n[1] 0.5"
  },
  {
    "objectID": "modules/basic/index.html#break-statement",
    "href": "modules/basic/index.html#break-statement",
    "title": "R programming basics",
    "section": "Break statement",
    "text": "Break statement\nThere are occasions where breaking the loop during execution is a good idea. The break statement can be used in for loops and while loops.\nFor example, if we are to set up a early warning system when bank_balance is less than or equal to 4 times weekly spending, we can do the following:\n\nbank_balance &lt;- 200\nweekly_spending &lt;- 28.5\nwhile (bank_balance&gt;= weekly_spending) {\n  bank_balance &lt;- bank_balance - weekly_spending\n  print(bank_balance)\n  if (bank_balance &lt;= 4*weekly_spending){\n    print(\"Find a job and cut weekly spending!\")\n    break\n  }\n}\n\n[1] 171.5\n[1] 143\n[1] 114.5\n[1] 86\n[1] \"Find a job and cut weekly spending!\""
  },
  {
    "objectID": "modules/data-wrangling/index.html",
    "href": "modules/data-wrangling/index.html",
    "title": "Data wrangling with R",
    "section": "",
    "text": "The tidyverse is a collection of R packages that transform and visualize data. They aim to be cohesive with each other and provide simple building block functions for you to use in complex applications. All packages of the tidyverse share very similar syntax and ideologies.\nThe tidyverse includes the following packages:\n\ndplyr: grammar of data manipulation\ntidyr: reshape your data\nreadr: read rectangular data\ntibble: re-imagining of the data frame\nstringr: working with string data\nggplot2: grammar of graphics\n\nand many more…\nIn this chapter, we focus on two packages: dplyr and tidyr.\ndplyr makes manipulating data easy. tidyr helps you to create “tidy data” (data where each variable is in a column, each observation is a row and each value is a cell). These packages contain the functions that help with adding, renaming, removing columns, computing new variables, joining data sets together, and summarising your data. These can solve the most common data manipulation challenges.\n\n\n\n\n\n\nTo get start on the journey\n\n\n\nFirst, install the core tidyverse packages with: install.packages(\"tidyverse\")\nThen, load the tidyverse package with: library(tidyverse)\n\n\n\n\n\n\n\n\nTip\n\n\n\nDid you know you can also load specific library separately, for example, library(dplyr)"
  },
  {
    "objectID": "modules/data-wrangling/index.html#introduction-to-tidyverse-1",
    "href": "modules/data-wrangling/index.html#introduction-to-tidyverse-1",
    "title": "Data wrangling with R",
    "section": "",
    "text": "The tidyverse is a collection of R packages that transform and visualize data. They aim to be cohesive with each other and provide simple building block functions for you to use in complex applications. All packages of the tidyverse share very similar syntax and ideologies.\nThe tidyverse includes the following packages:\n\ndplyr: grammar of data manipulation\ntidyr: reshape your data\nreadr: read rectangular data\ntibble: re-imagining of the data frame\nstringr: working with string data\nggplot2: grammar of graphics\n\nand many more…\nIn this chapter, we focus on two packages: dplyr and tidyr.\ndplyr makes manipulating data easy. tidyr helps you to create “tidy data” (data where each variable is in a column, each observation is a row and each value is a cell). These packages contain the functions that help with adding, renaming, removing columns, computing new variables, joining data sets together, and summarising your data. These can solve the most common data manipulation challenges.\n\n\n\n\n\n\nTo get start on the journey\n\n\n\nFirst, install the core tidyverse packages with: install.packages(\"tidyverse\")\nThen, load the tidyverse package with: library(tidyverse)\n\n\n\n\n\n\n\n\nTip\n\n\n\nDid you know you can also load specific library separately, for example, library(dplyr)"
  },
  {
    "objectID": "modules/data-wrangling/index.html#introduction-to-dplyr-1",
    "href": "modules/data-wrangling/index.html#introduction-to-dplyr-1",
    "title": "Data wrangling with R",
    "section": "Introduction to dplyr",
    "text": "Introduction to dplyr\ndplyr provides a selection of tools for the most common data wrangling tasks. There are a few simple yet handy functions.\n\nselect()\nfilter()\narrange()\nmutate()\ngroup_by() along with ungroup()\ncount()\ncase_when()"
  },
  {
    "objectID": "modules/data-wrangling/index.html#select",
    "href": "modules/data-wrangling/index.html#select",
    "title": "Data wrangling with R",
    "section": "select()",
    "text": "select()\nThis function allows you to pick particular variables from your data.\n\ndata |&gt;\n    select(variable)\n\nThis is not only limited to one variable selection. You can select multiple variables by separating the column name with the comma.\n\ndata |&gt;\n    select(variable1, variable2)\n\n\n\n\n\n\n\nYour turn!\n\n\n\nWe will be using penguin data from the palmerpenguins package.\nLet’s say that you want to look at whether the body mass changes over the year.\nHint: To look at the column names of the data, you can use the functions colnames()\n\n\n\n  🟡 Loading\n    webR...\n  💡 Check answer\n  ✅ Show solution\n  💥 Reset code\n  \n    \n    \n      \n    \n  \n  \n  \n\n\n\nSelection helpers\nThere are many helper functions that allow you to select variables by matching the patterns in the column’s name. Let’s look at a few examples.\n\nstarts_with(): select all variables that start with a prefix.\n\n\npenguins |&gt;\n    select(starts_with(\"bill\"))\n\n# A tibble: 344 × 2\n   bill_length_mm bill_depth_mm\n            &lt;dbl&gt;         &lt;dbl&gt;\n 1           39.1          18.7\n 2           39.5          17.4\n 3           40.3          18  \n 4           NA            NA  \n 5           36.7          19.3\n 6           39.3          20.6\n 7           38.9          17.8\n 8           39.2          19.6\n 9           34.1          18.1\n10           42            20.2\n# ℹ 334 more rows\n\n\n\nends_with(): select all variables that ends with a suffix.\n\n\npenguins |&gt;\n    select(ends_with(\"mm\"))\n\n# A tibble: 344 × 3\n   bill_length_mm bill_depth_mm flipper_length_mm\n            &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;\n 1           39.1          18.7               181\n 2           39.5          17.4               186\n 3           40.3          18                 195\n 4           NA            NA                  NA\n 5           36.7          19.3               193\n 6           39.3          20.6               190\n 7           38.9          17.8               181\n 8           39.2          19.6               195\n 9           34.1          18.1               193\n10           42            20.2               190\n# ℹ 334 more rows\n\n\n\ncontains(): select all variables that contains a literal string.\n\n\npenguins |&gt;\n    select(contains(\"length\"))\n\n# A tibble: 344 × 2\n   bill_length_mm flipper_length_mm\n            &lt;dbl&gt;             &lt;int&gt;\n 1           39.1               181\n 2           39.5               186\n 3           40.3               195\n 4           NA                  NA\n 5           36.7               193\n 6           39.3               190\n 7           38.9               181\n 8           39.2               195\n 9           34.1               193\n10           42                 190\n# ℹ 334 more rows\n\n\n\nnum_range(): select all variables that matches a numerical range like x01, x02, x03.\n\n\nbillboard |&gt; \n    select(num_range(\"wk\", 10:15))\n\n# A tibble: 317 × 6\n    wk10  wk11  wk12  wk13  wk14  wk15\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1    NA    NA    NA    NA    NA    NA\n 2    NA    NA    NA    NA    NA    NA\n 3    51    51    51    47    44    38\n 4    61    61    59    61    66    72\n 5    57    64    70    75    76    78\n 6     6     7    22    29    36    47\n 7    NA    NA    NA    NA    NA    NA\n 8    36    37    37    38    49    61\n 9    10     9     8     6     1     2\n10    59    66    68    61    67    59\n# ℹ 307 more rows"
  },
  {
    "objectID": "modules/data-wrangling/index.html#filter",
    "href": "modules/data-wrangling/index.html#filter",
    "title": "Data wrangling with R",
    "section": "filter()",
    "text": "filter()\nThis allow you to extract observation from the data based on a given condition.\n\ndata |&gt;\n    filter(expression)\n\nFor the expression field, there are many functions and operators that are useful for constructing the expressions.\n\n==, &gt;, &gt;= etc\n&, |, !, xor()\nis.na()\nbetween(), near()\n\n\npenguins |&gt;\n    filter(species == \"Gentoo\")\n\n# A tibble: 124 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Gentoo  Biscoe           46.1          13.2               211        4500\n 2 Gentoo  Biscoe           50            16.3               230        5700\n 3 Gentoo  Biscoe           48.7          14.1               210        4450\n 4 Gentoo  Biscoe           50            15.2               218        5700\n 5 Gentoo  Biscoe           47.6          14.5               215        5400\n 6 Gentoo  Biscoe           46.5          13.5               210        4550\n 7 Gentoo  Biscoe           45.4          14.6               211        4800\n 8 Gentoo  Biscoe           46.7          15.3               219        5200\n 9 Gentoo  Biscoe           43.3          13.4               209        4400\n10 Gentoo  Biscoe           46.8          15.4               215        5150\n# ℹ 114 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "modules/installation/01-installation.html",
    "href": "modules/installation/01-installation.html",
    "title": "Getting started with R and RStudio",
    "section": "",
    "text": "R and Rstudio are powerful tools for statistical analysis. R is an open-source language, meaning it is both free and supported by a large, active community. RStudio provides an intuitive and user-friendly interface, making using R more productive. The R package (more on this later) ecosystem allows users to extend its functionality for various types of analysis. Additionally, it facilitates reproducible code and reports and allows researchers to share their work with others.\n\n\n\nR is a free software environment for statistical computing and graphics. RStudio is an integrated development environment (IDE) for R. To understand why we might want to use R with RStudio. We will use the analogy from Modern Dive book.\n\nAt its simplest, R is like a car’s engine while RStudio is like a car’s dashboard"
  },
  {
    "objectID": "modules/installation/01-installation.html#why-do-we-want-to-learn-and-use-r-and-rstudio",
    "href": "modules/installation/01-installation.html#why-do-we-want-to-learn-and-use-r-and-rstudio",
    "title": "Getting started with R and RStudio",
    "section": "",
    "text": "R and Rstudio are powerful tools for statistical analysis. R is an open-source language, meaning it is both free and supported by a large, active community. RStudio provides an intuitive and user-friendly interface, making using R more productive. The R package (more on this later) ecosystem allows users to extend its functionality for various types of analysis. Additionally, it facilitates reproducible code and reports and allows researchers to share their work with others."
  },
  {
    "objectID": "modules/installation/01-installation.html#what-is-r-and-rstudio",
    "href": "modules/installation/01-installation.html#what-is-r-and-rstudio",
    "title": "Getting started with R and RStudio",
    "section": "",
    "text": "R is a free software environment for statistical computing and graphics. RStudio is an integrated development environment (IDE) for R. To understand why we might want to use R with RStudio. We will use the analogy from Modern Dive book.\n\nAt its simplest, R is like a car’s engine while RStudio is like a car’s dashboard"
  },
  {
    "objectID": "modules/installation/01-installation.html#windows",
    "href": "modules/installation/01-installation.html#windows",
    "title": "Getting started with R and RStudio",
    "section": "Windows",
    "text": "Windows\nSteps:\n\nClick “Download R for Windows”\n\n\n\n\n\n\n\n\n\n\n\nClick “base”\n\n\n\n\n\n\n\n\n\n\n\nClick the link at the top of the page. It should say something like “Download R-4.4.1 for Windows”, where the numbers would change to the latest version.\n\n\n\n\n\n\n\n\n\n\n\nRun the downloaded executable file.\n\n\n\n\n\n\n\n\n\n\n\nAllow the installer to change your device.\n\n\n\n\n\n\n\n\n\n\n\nFollow the prompt instructions. You do not need to customise the startup."
  },
  {
    "objectID": "modules/installation/01-installation.html#macos",
    "href": "modules/installation/01-installation.html#macos",
    "title": "Getting started with R and RStudio",
    "section": "MacOS",
    "text": "MacOS\nSteps:\n\nClick “Download R for macOS”\n\n\n\n\n\n\n\n\n\n\n\nUnder the “Latest release:”, click the .pkg base on your system architecture. If you are using Apple silicon (M1 onwards) Macs, click the “R-4.41-arm64.pkg”, otherwise, click the “R-4.4.1-x86_64.pkg”.\n\n\n\n\n\n\n\n\n\n\n\nAfter finishing downloading the .pkg, double-click on it.\n\n\n\n\n\n\n\n\n\n\n\nFollow the installer’s instructions. It will involve reading through some documents and clicking continue or install.\n\n\n\n\n\n\n\n\n\n\n\nOnce the installation is complete, click “Close” to exit the installation process."
  },
  {
    "objectID": "modules/installation/01-installation.html#linux",
    "href": "modules/installation/01-installation.html#linux",
    "title": "Getting started with R and RStudio",
    "section": "Linux",
    "text": "Linux\nSteps:\n\nClick “Download R for Linux”.\n\n\n\n\n\n\n\n\n\n\n\nClick on the directory based on the Linux version you have.\n\n\n\n\n\n\n\n\n\n\n\nFollow the instructions on the website."
  },
  {
    "objectID": "modules/installation/01-installation.html#windows-1",
    "href": "modules/installation/01-installation.html#windows-1",
    "title": "Getting started with R and RStudio",
    "section": "Windows",
    "text": "Windows\nSteps:\n\nClick the .exe file. It should look similar to “RSTUDIO-2024.04.2-764.EXE”. The number will be different based on the latest version.\n\n\n\n\n\n\n\n\n\n\n\nRun the executable file to install RStudio.\n\n\n\n\n\n\n\n\n\n\n\nAllow the installer to make changes on your computer.\n\n\n\n\n\n\n\n\n\n\n\nFollow the prompts.\nSearch for RStudio on your computer and open it. You are now ready to learn R!"
  },
  {
    "objectID": "modules/installation/01-installation.html#macos-1",
    "href": "modules/installation/01-installation.html#macos-1",
    "title": "Getting started with R and RStudio",
    "section": "MacOS",
    "text": "MacOS\nSteps:\n\nClick the .dmg file. It should look similar to “RSTUDIO-2024.04.2-764.DMG”. The number will be different based on the latest version.\n\n\n\n\n\n\n\n\n\n\n\nDrag RStudio.app into the Applications folder. Now you are ready to use R!"
  },
  {
    "objectID": "modules/installation/01-installation.html#linux-1",
    "href": "modules/installation/01-installation.html#linux-1",
    "title": "Getting started with R and RStudio",
    "section": "Linux",
    "text": "Linux\nSteps:\n\nClick download the file based on your Linux version.\n\n\n\n\n\n\n\n\n\n\n\nFollow the instructions prompts."
  },
  {
    "objectID": "modules/project-structure/01-project-structure.html",
    "href": "modules/project-structure/01-project-structure.html",
    "title": "Project structure",
    "section": "",
    "text": "The paths are used to identify the location of a file, computer, device, or web page. You could think of it as a direction pointing to the destination.\n\n\nThere are two main ways of defining the paths to a file: absolute and relative.\n\n\nIt is a full location of the file or directory specified, starting from the home directory.\n\n\nThe path may look different depending on the system you are using. If we want to locate a penguin’s data inside the folder called learnR, this is what it may look like.\nWindows:\nC:\\Desktop\\learnR\\data\\penguins.csv\nMacOS & Linux:\n/Users/Desktop/learnR/data/penguins.csv\n\n\n\n\n\n\nUse of absolute path\n\n\n\nAbsolute paths should never be used in projects, as others will not be able to run the code you provide. This is because absolute paths to a project vary with operating systems and where the project is stored.\nAs we can see, MacOS and Windows have completely different path structures.\n\n\n\n\n\n\nIt is the location of a file or directory specified relative to your current working directory.\n\n\nThe working directory is the default location R is looking at when loading the file or where it will store the files. If you want to check where your current working directory is, you can run the getwd() function. To understand a bit more about the current working directory, let me introduce the here package.\n\n\n\nIt enables easy file referencing in project-oriented workflows. The here() function helps you build a path to your specified files. For example, if you want to access panguins data in your project folder instead of read_csv(\"Users/Desktop/learnR/data/penguins.csv\"), you can just read_csv(here::here(\"data/penguins\")). It only works because your current working directory is in the learnR folder through the here() function.\n\nhere::here(\"modules/project-structure/pictures/01-project-structure/here.png\")\n\n[1] \"/home/mitchell/github/monash-learnr-modules/modules/project-structure/pictures/01-project-structure/here.png\"\n\nknitr::include_graphics(here::here(\"modules/project-structure/pictures/01-project-structure/here.png\"))\n\n\n\n\nIllustration by Allison Horst\n\n\n\n\nLet’s say you are trying to get to the Campus center. An absolute path would direct you absolutely, starting from Earth, Australia, Melbourne, Monash Clayton, and then Campus Center. However, the relative path to Monash Clayton is the path from the Monash Clayton Campus to the Campus Center.\nYou should always use the relative path when working on a project. It allows anyone who has your project to run the code without changing file paths, as it is unlikely that all the users will have the same absolute path.\n\n\n\n\n\n\nWebpage\n\n\n\nSo far, we only see how to reference files on our computers. However, we can also reference places on other computers, for example, when we want to get data from the internet.\nTo locate the webpage, we use the URL (Uniform Resource Locator) to identify any resource on the internet.\nhttps://learnr.numbat.space/data/penguins.csv"
  },
  {
    "objectID": "modules/project-structure/01-project-structure.html#file-path",
    "href": "modules/project-structure/01-project-structure.html#file-path",
    "title": "Project structure",
    "section": "",
    "text": "There are two main ways of defining the paths to a file: absolute and relative.\n\n\nIt is a full location of the file or directory specified, starting from the home directory.\n\n\nThe path may look different depending on the system you are using. If we want to locate a penguin’s data inside the folder called learnR, this is what it may look like.\nWindows:\nC:\\Desktop\\learnR\\data\\penguins.csv\nMacOS & Linux:\n/Users/Desktop/learnR/data/penguins.csv\n\n\n\n\n\n\nUse of absolute path\n\n\n\nAbsolute paths should never be used in projects, as others will not be able to run the code you provide. This is because absolute paths to a project vary with operating systems and where the project is stored.\nAs we can see, MacOS and Windows have completely different path structures.\n\n\n\n\n\n\nIt is the location of a file or directory specified relative to your current working directory.\n\n\nThe working directory is the default location R is looking at when loading the file or where it will store the files. If you want to check where your current working directory is, you can run the getwd() function. To understand a bit more about the current working directory, let me introduce the here package.\n\n\n\nIt enables easy file referencing in project-oriented workflows. The here() function helps you build a path to your specified files. For example, if you want to access panguins data in your project folder instead of read_csv(\"Users/Desktop/learnR/data/penguins.csv\"), you can just read_csv(here::here(\"data/penguins\")). It only works because your current working directory is in the learnR folder through the here() function.\n\nhere::here(\"modules/project-structure/pictures/01-project-structure/here.png\")\n\n[1] \"/home/mitchell/github/monash-learnr-modules/modules/project-structure/pictures/01-project-structure/here.png\"\n\nknitr::include_graphics(here::here(\"modules/project-structure/pictures/01-project-structure/here.png\"))\n\n\n\n\nIllustration by Allison Horst\n\n\n\n\nLet’s say you are trying to get to the Campus center. An absolute path would direct you absolutely, starting from Earth, Australia, Melbourne, Monash Clayton, and then Campus Center. However, the relative path to Monash Clayton is the path from the Monash Clayton Campus to the Campus Center.\nYou should always use the relative path when working on a project. It allows anyone who has your project to run the code without changing file paths, as it is unlikely that all the users will have the same absolute path.\n\n\n\n\n\n\nWebpage\n\n\n\nSo far, we only see how to reference files on our computers. However, we can also reference places on other computers, for example, when we want to get data from the internet.\nTo locate the webpage, we use the URL (Uniform Resource Locator) to identify any resource on the internet.\nhttps://learnr.numbat.space/data/penguins.csv"
  },
  {
    "objectID": "modules/project-structure/01-project-structure.html#new-r-project",
    "href": "modules/project-structure/01-project-structure.html#new-r-project",
    "title": "Project structure",
    "section": "New R project",
    "text": "New R project\n\nTo create a new project, click the project selector in the top-right corner. Then click on the “New Project…”.\n\n\n\n\n\n\n\n\n\n\n\nIt will show you three options.\n\nIf you want to start a new R project in a new location on your computer, select “New Directory”.\nIf you want to start a new R project in a location where all the files already exist, select “Existing Directory”.\nIf you want to start a new R project by cloning a version control (Git or Subversion) repository, select “Version Control”.\n\nFor your very first R project, let’s start by selecting “New Directory”.\n\n\n\n\n\n\n\n\n\n\n\nThere are many different types of R projects that you can create. For a data analysis project, we would select “New Project” for an empty folder.\n\n\n\n\n\n\n\n\n\n\n\nGive your project (and the folder containing it) a name using the “Directory name:” field. You can also choose where the project will exist on your computer by clicking on the “Browse…” button. If you do not choose, it will be in your home directory. You can leave the rest unticked for now.\n\n\n\n\n\n\n\n\n\n\n\nClick “Create Project”.\n\n\n\n\n\n\n\n\n\n\nYou should be able to see the project file with .Rproj extension inside the project directory. You have now successfully created the R project. Clicking on the .Rproj file will open the project directly in RStudio.\n\n\n\n\n\n\nSelf contained\n\n\n\nProjects should be self-contained, meaning all files and data should exist inside the project directory. It makes sharing the work easy since all the files required to reproduce the analysis are relative to the project folder.\n\n\n\n\n\n\n\n\nDo not save the workspace image\n\n\n\nWhen closing RStudo, you might be greeted with this pop-up asking you to save workspace images. You should select “Don’t Save”.\nSave the workspace means storing all of the objects you’ve created for the next time you open the project. It may sound tempting to do it, but it is bad for reproducibility. We should use code to reproduce the objects in the R environment and save them inside the project directory.\nYou can prevent the popup messages by going to the “Global Options” and inside “General”, changing “Save workspace to .RData on exit” to “Never”."
  }
]